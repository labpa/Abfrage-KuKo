{"ast":null,"code":"var _jsxFileName = \"/home/pascal/Projekte/abfrage-api-supporter/src/App.tsx\",\n  _s = $RefreshSig$();\n// import React, { FC, useEffect, useState } from 'react';\n// import dayjs from \"dayjs\";\n// import './css/App.css';\n// import benzel from '../src/images/app/grafik 1.png';\n// import Vector from '../src/images/app/Vector.png';\n// import Karte from '../src/images/app/map.png';\n// import Pfeil from '../src/images/app/pfeil.png'\n// import Beschriftung from '../src/images/app/beschriftung.png'\n// import BarcodeReader from 'react-barcode-reader';\n//\n// const App: FC = () => {\n//     const [data, setData] = useState<any>(null);\n//     const [eingabe, setEingabe] = useState<string>(\"\");\n//     const [abfrage, setAbfrage] = useState<boolean>(false);\n//     const [warnung, setWarnung] = useState<boolean>(false);\n//     const [warnungText, setWarnungText] = useState<string | null>(null);\n//     // const now: dayjs.Dayjs = dayjs(); todo: exampleDate = now\n//     const exampleDate = dayjs('2023.01.01');\n//     const [noData, setNoData] = useState<boolean>(false);\n//     const [zaehler, setZaehler] = useState<number>(0);\n//\n//\n//     //Zeitangabe Anzeige Abfrage\n//     const normal = 10000; // 10 Sekunden -> Normale Abfrage\n//     const lang = 18000; // 18 Sekunden -> Abfrage mit Warnung\n//     const kurz = 3000; // 3 Sekunden -> Abfrage Falsche ID\n//\n//\n//     // Lookup-Tabellen\n//     // Treffpunkt\n//     const waitingSpot: Record<string, string> = {\n//         bike: \"Fahrrad\",\n//         bottle: \"Flasche\",\n//         island: \"Insel\",\n//         keys: \"Schlüssel\",\n//         kitchen: \"Küche\",\n//         mic: \"Mikro\",\n//         mobile: \"Mobile Zellen\",\n//         sofa: \"Sofa\",\n//         star: \"Stern\",\n//         sun: \"Sonne\",\n//         tent: \"Zelt\",\n//         tree: \"Baum\",\n//         turtle: \"Taube\",\n//         window: \"bitte erfragen\"\n//     };\n//\n//     //Übersetzung der Tage\n//     const days: Record<string, string> = {\n//         Mon: \"Mo, Mon\",\n//         Tue: \"Di, Tue\",\n//         Wed: \"Mi, Wed\",\n//         Thu: \"Do, Thu\",\n//         Fri: \"Fr, Fri\",\n//         Sat: \"Sa, Sat\",\n//         Sun: \"So, Sun\"\n//     };\n//\n//\n//     const counter = () => {\n//         setZaehler(prevCount => prevCount + 1); // Zustand aktualisieren\n//     }\n//\n//\n//     //NFC-Reader\n//     //Eingabe des NFC-Scanners wird verarbeitet\n//     const handleScan = async (data: string) => {\n//         if (data !== \"\") {\n//             setEingabe(data);\n//             await fetchData(data); // Warte auf die Datenabfrage, bevor du fortfährst\n//             setAbfrage(true);\n//\n//         } else {\n//             alert(\"Leer nicht möglich\");\n//         }\n//     };\n//\n//     //Im Falle eines Fehlers wird dieser ausgegeben\n//     const handleError = (err: any) => {\n//         console.error(err);\n//     };\n//\n//\n//     //API-Abfrage\n//     const fetchData = async (input: string) => {\n//         try {\n//             const trimmedInput = input.trim();\n//             if (trimmedInput !== \"\") {\n//                 const ausgabeResponse = await fetch(`https://supporter.kulturkosmos.de/api/self-service/shifts/${trimmedInput}`);\n//\n//                 if (!ausgabeResponse.ok) {\n//                     throw new Error('Fehler beim Abrufen der Schichtdaten');\n//                 }\n//\n//                 const jsonData = await ausgabeResponse.json();\n//                 const abfrageWarnung = await fetch('https://supporter.kulturkosmos.de/api/self-service/special-information');\n//                 const jsonWarnung = await abfrageWarnung.json();\n//\n//                 if (jsonWarnung.data && jsonWarnung.data.text) {\n//                     const textWithoutTags = jsonWarnung.data.text.replace(/<[^>]*>/g, ' ');\n//                     setWarnung(true);\n//                     setWarnungText(textWithoutTags);\n//                 }\n//\n//                 if (jsonData.data === null) {\n//                     setNoData(true);\n//                     setData(false);\n//                     setWarnung(false);\n//                 } else {\n//                     setData(jsonData);\n//                 }\n//             }\n//         } catch (error) {\n//             console.error('Fehler beim Abrufen der Daten:', error);\n//         }\n//     };\n//\n//\n//     //useEffect\n//     useEffect(() => {\n//         if (noData) {\n//             const timer = setTimeout(() => {\n//                 setNoData(false);\n//                 setWarnung(false);\n//                 setAbfrage(false);\n//             },kurz); // 3 seconds\n//             return () => clearTimeout(timer);\n//         }\n//\n//         if (abfrage) {\n//             const timeoutDauer = warnung ? lang : normal;\n//             const timer = setTimeout(() => {\n//                 setAbfrage(false);\n//                 setWarnung(false);\n//                 counter();\n//             }, timeoutDauer);\n//             return () => clearTimeout(timer);\n//         }\n//\n//     }, [abfrage, warnung, normal, lang, kurz,  noData]);\n//\n//\n//\n//     return (\n//         <div>\n//             <div className={\"grundflaeche\"}>\n//                 <div className={!abfrage ? \"box\" : \"box boxleft\"}>\n//                     {!abfrage ? (\n//                         <>\n//                             <h2>Supporter Schichtauskunft</h2>\n//                             <h3>Supporter Shiftinformation</h3>\n//                             <h4 className={\"deutsch\"}>Bitte halte dein Bändsel unter den Scanner</h4>\n//                             <h5 className={\"englisch\"}>Please hold your wristband under the scanner</h5>\n//                             <img src={benzel} alt=\"benzel\" className=\"benzel\" />\n//                         </>\n//                     ) : (\n//                         <>\n//                             {warnung && (\n//                                 <div className={\"scroll-container\"}>\n//                                     <div className={\"warnung\"}>\n//                                         <div className={\"warnung-text\"}>{warnungText}</div>\n//                                     </div>\n//                                 </div>\n//                             )}\n//                             <h2>Supporter Schichtauskunft</h2>\n//                             <h3>Supporter Shiftinformation</h3>\n//                             {data ? (\n//                                 <>\n//                                     <h4 className={\"deutsch-ausgabe\"}>Deine Schichten</h4>\n//                                     <h5 className={\"englisch-ausgabe\"}>Your Shifts</h5>\n//                                     {data.data && data.data.length > 0 ? (\n//                                         data.data\n//                                             .filter((entry: any) => dayjs(entry.startAt).isAfter(exampleDate) || dayjs(entry.startAt).isSame(exampleDate, 'day'))\n//                                             .sort((a: any, b: any) => dayjs(a.startAt).diff(exampleDate) - dayjs(b.startAt).diff(exampleDate))\n//                                             .slice(0, 3)\n//                                             .map((entry: any, index: number) => (\n//                                                 <div className={\"ausgabeabfrage\"} key={index}>\n//                                                     <p className={\"index\"}>{index + 1}</p>\n//                                                     <p className={\"days\"}><strong>{days[dayjs(entry.startAt).format('ddd')]}</strong> // {dayjs(entry.startAt).format('DD.MM - HH:mm')}</p>\n//                                                     {/*<p className={\"vector\"}> <img src={Vector} alt=\"Vector\" className=\"Vector\" /></p>*/}\n//                                                     <p className={\"place\"}><img src={Vector} alt=\"Vector\" className=\"Vector\" /> &nbsp; &nbsp; &nbsp;  {waitingSpot[entry.waitingSpot]}</p>\n//                                                     <br />\n//                                                 </div>\n//                                             ))\n//                                     ) : (\n//                                         <p></p>\n//                                     )}\n//                                 </>\n//                             ) : (\n//                                 noData && (\n//                                     <>\n//                                         <h4 className={\"deutsch-ausgabe-no\"}>Keine Informationen</h4>\n//                                         <h5 className={\"englisch-ausgabe-no\"}>No Information</h5>\n//                                     </>\n//                                 )\n//                             )}\n//                         </>\n//                     )}\n//                 </div>\n//                 <img src={Karte} alt={\"Karte\"} className={`Karte${abfrage ? ' in' : ''}`} />\n//                 <img src={Pfeil} alt={\"Pfeil\"} className={`Pfeil ${abfrage ? 'ok' : ''}`}/>\n//                 <img src={Beschriftung} alt={\"Beschriftung\"} className={`Beschriftung ${abfrage ? 'ko' : ''}`}/>\n//             </div>\n//\n//             <div className={\"wip\"}>\n//                 <BarcodeReader\n//                     onError={handleError}\n//                     onScan={handleScan}\n//                 />\n//             </div>\n//\n//             {zaehler}\n//         </div>\n//     );\n// };\n//\n// export default App;\n\nimport React, { useEffect, useState } from 'react';\nimport dayjs from \"dayjs\";\nimport './css/App.css';\nimport benzel from '../src/images/app/grafik 1.png';\nimport Vector from '../src/images/app/Vector.png';\nimport Karte from '../src/images/app/map.png';\nimport Pfeil from '../src/images/app/pfeil.png';\nimport Beschriftung from '../src/images/app/beschriftung.png';\nimport BarcodeReader from 'react-barcode-reader';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [data, setData] = useState(null);\n  const [eingabe, setEingabe] = useState(\"\");\n  const [abfrage, setAbfrage] = useState(false);\n  const [warnung, setWarnung] = useState(false);\n  const [warnungText, setWarnungText] = useState(null);\n  // const now: dayjs.Dayjs = dayjs(); todo: exampleDate = now\n  const exampleDate = dayjs('2023.01.01');\n  const [noData, setNoData] = useState(false);\n  const [zaehler, setZaehler] = useState(0);\n  const [lastScannedId, setLastScannedId] = useState(\"\");\n\n  //Zeitangabe Anzeige Abfrage\n  const normal = 10000; // 10 Sekunden -> Normale Abfrage\n  const lang = 18000; // 18 Sekunden -> Abfrage mit Warnung\n  const kurz = 3000; // 3 Sekunden -> Abfrage Falsche ID\n\n  // Lookup-Tabellen\n  // Treffpunkt\n  const waitingSpot = {\n    bike: \"Fahrrad\",\n    bottle: \"Flasche\",\n    island: \"Insel\",\n    keys: \"Schlüssel\",\n    kitchen: \"Küche\",\n    mic: \"Mikro\",\n    mobile: \"Mobile Zellen\",\n    sofa: \"Sofa\",\n    star: \"Stern\",\n    sun: \"Sonne\",\n    tent: \"Zelt\",\n    tree: \"Baum\",\n    turtle: \"Taube\",\n    window: \"bitte erfragen\"\n  };\n\n  //Übersetzung der Tage\n  const days = {\n    Mon: \"Mo, Mon\",\n    Tue: \"Di, Tue\",\n    Wed: \"Mi, Wed\",\n    Thu: \"Do, Thu\",\n    Fri: \"Fr, Fri\",\n    Sat: \"Sa, Sat\",\n    Sun: \"So, Sun\"\n  };\n  const counter = () => {\n    setZaehler(prevCount => prevCount + 1); // Zustand aktualisieren\n  };\n\n  //NFC-Reader\n  //Eingabe des NFC-Scanners wird verarbeitet\n  const handleScan = async data => {\n    if (data !== \"\" && data !== lastScannedId) {\n      setEingabe(data);\n      setLastScannedId(data);\n      await fetchData(data); // Warte auf die Datenabfrage, bevor du fortfährst\n      setAbfrage(true);\n    } else if (data === lastScannedId) {\n      alert(\"Diese ID wurde bereits gescannt.\");\n    } else {\n      alert(\"Leer nicht möglich\");\n    }\n  };\n\n  //Im Falle eines Fehlers wird dieser ausgegeben\n  const handleError = err => {\n    console.error(err);\n  };\n\n  //API-Abfrage\n  const fetchData = async input => {\n    try {\n      const trimmedInput = input.trim();\n      if (trimmedInput !== \"\") {\n        const ausgabeResponse = await fetch(`https://supporter.kulturkosmos.de/api/self-service/shifts/${trimmedInput}`);\n        if (!ausgabeResponse.ok) {\n          throw new Error('Fehler beim Abrufen der Schichtdaten');\n        }\n        const jsonData = await ausgabeResponse.json();\n        const abfrageWarnung = await fetch('https://supporter.kulturkosmos.de/api/self-service/special-information');\n        const jsonWarnung = await abfrageWarnung.json();\n        if (jsonWarnung.data && jsonWarnung.data.text) {\n          const textWithoutTags = jsonWarnung.data.text.replace(/<[^>]*>/g, ' ');\n          setWarnung(true);\n          setWarnungText(textWithoutTags);\n        }\n        if (jsonData.data === null) {\n          setNoData(true);\n          setData(false);\n          setWarnung(false);\n        } else {\n          setData(jsonData);\n        }\n      }\n    } catch (error) {\n      console.error('Fehler beim Abrufen der Daten:', error);\n    }\n  };\n\n  //useEffect\n  useEffect(() => {\n    if (noData) {\n      const timer = setTimeout(() => {\n        setNoData(false);\n        setWarnung(false);\n        setAbfrage(false);\n      }, kurz); // 3 seconds\n      return () => clearTimeout(timer);\n    }\n    if (abfrage) {\n      const timeoutDauer = warnung ? lang : normal;\n      const timer = setTimeout(() => {\n        setAbfrage(false);\n        setWarnung(false);\n        counter();\n      }, timeoutDauer);\n      return () => clearTimeout(timer);\n    }\n  }, [abfrage, warnung, normal, lang, kurz, noData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grundflaeche\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: !abfrage ? \"box\" : \"box boxleft\",\n        children: !abfrage ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Supporter Schichtauskunft\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Supporter Shiftinformation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"deutsch\",\n            children: \"Bitte halte dein B\\xE4ndsel unter den Scanner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"englisch\",\n            children: \"Please hold your wristband under the scanner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: benzel,\n            alt: \"benzel\",\n            className: \"benzel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [warnung && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"scroll-container\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"warnung\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"warnung-text\",\n                children: warnungText\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Supporter Schichtauskunft\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Supporter Shiftinformation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 29\n          }, this), data ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"deutsch-ausgabe\",\n              children: \"Deine Schichten\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"englisch-ausgabe\",\n              children: \"Your Shifts\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 402,\n              columnNumber: 37\n            }, this), data.data && data.data.length > 0 ? data.data.filter(entry => dayjs(entry.startAt).isAfter(exampleDate) || dayjs(entry.startAt).isSame(exampleDate, 'day')).sort((a, b) => dayjs(a.startAt).diff(exampleDate) - dayjs(b.startAt).diff(exampleDate)).slice(0, 3).map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ausgabeabfrage\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"index\",\n                children: index + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 410,\n                columnNumber: 53\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"days\",\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: days[dayjs(entry.startAt).format('ddd')]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 411,\n                  columnNumber: 75\n                }, this), \" // \", dayjs(entry.startAt).format('DD.MM - HH:mm')]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 411,\n                columnNumber: 53\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"place\",\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  src: Vector,\n                  alt: \"Vector\",\n                  className: \"Vector\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 413,\n                  columnNumber: 76\n                }, this), \" \\xA0 \\xA0 \\xA0  \", waitingSpot[entry.waitingSpot]]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 413,\n                columnNumber: 53\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 414,\n                columnNumber: 53\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 409,\n              columnNumber: 49\n            }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 418,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true) : noData && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"deutsch-ausgabe-no\",\n              children: \"Keine Informationen\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"englisch-ausgabe-no\",\n              children: \"No Information\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 425,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: Karte,\n        alt: \"Karte\",\n        className: `Karte${abfrage ? ' in' : ''}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: Pfeil,\n        alt: \"Pfeil\",\n        className: `Pfeil ${abfrage ? 'ok' : ''}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: Beschriftung,\n        alt: \"Beschriftung\",\n        className: `Beschriftung ${abfrage ? 'ko' : ''}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wip\",\n      children: /*#__PURE__*/_jsxDEV(BarcodeReader, {\n        onError: handleError,\n        onScan: handleScan\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 13\n    }, this), zaehler]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 377,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"ScQDRQZvBW/HVpjXhfQG6H6+mWg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","dayjs","benzel","Vector","Karte","Pfeil","Beschriftung","BarcodeReader","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","data","setData","eingabe","setEingabe","abfrage","setAbfrage","warnung","setWarnung","warnungText","setWarnungText","exampleDate","noData","setNoData","zaehler","setZaehler","lastScannedId","setLastScannedId","normal","lang","kurz","waitingSpot","bike","bottle","island","keys","kitchen","mic","mobile","sofa","star","sun","tent","tree","turtle","window","days","Mon","Tue","Wed","Thu","Fri","Sat","Sun","counter","prevCount","handleScan","fetchData","alert","handleError","err","console","error","input","trimmedInput","trim","ausgabeResponse","fetch","ok","Error","jsonData","json","abfrageWarnung","jsonWarnung","text","textWithoutTags","replace","timer","setTimeout","clearTimeout","timeoutDauer","children","className","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","length","filter","entry","startAt","isAfter","isSame","sort","a","b","diff","slice","map","index","format","onError","onScan","_c","$RefreshReg$"],"sources":["/home/pascal/Projekte/abfrage-api-supporter/src/App.tsx"],"sourcesContent":["// import React, { FC, useEffect, useState } from 'react';\n// import dayjs from \"dayjs\";\n// import './css/App.css';\n// import benzel from '../src/images/app/grafik 1.png';\n// import Vector from '../src/images/app/Vector.png';\n// import Karte from '../src/images/app/map.png';\n// import Pfeil from '../src/images/app/pfeil.png'\n// import Beschriftung from '../src/images/app/beschriftung.png'\n// import BarcodeReader from 'react-barcode-reader';\n//\n// const App: FC = () => {\n//     const [data, setData] = useState<any>(null);\n//     const [eingabe, setEingabe] = useState<string>(\"\");\n//     const [abfrage, setAbfrage] = useState<boolean>(false);\n//     const [warnung, setWarnung] = useState<boolean>(false);\n//     const [warnungText, setWarnungText] = useState<string | null>(null);\n//     // const now: dayjs.Dayjs = dayjs(); todo: exampleDate = now\n//     const exampleDate = dayjs('2023.01.01');\n//     const [noData, setNoData] = useState<boolean>(false);\n//     const [zaehler, setZaehler] = useState<number>(0);\n//\n//\n//     //Zeitangabe Anzeige Abfrage\n//     const normal = 10000; // 10 Sekunden -> Normale Abfrage\n//     const lang = 18000; // 18 Sekunden -> Abfrage mit Warnung\n//     const kurz = 3000; // 3 Sekunden -> Abfrage Falsche ID\n//\n//\n//     // Lookup-Tabellen\n//     // Treffpunkt\n//     const waitingSpot: Record<string, string> = {\n//         bike: \"Fahrrad\",\n//         bottle: \"Flasche\",\n//         island: \"Insel\",\n//         keys: \"Schlüssel\",\n//         kitchen: \"Küche\",\n//         mic: \"Mikro\",\n//         mobile: \"Mobile Zellen\",\n//         sofa: \"Sofa\",\n//         star: \"Stern\",\n//         sun: \"Sonne\",\n//         tent: \"Zelt\",\n//         tree: \"Baum\",\n//         turtle: \"Taube\",\n//         window: \"bitte erfragen\"\n//     };\n//\n//     //Übersetzung der Tage\n//     const days: Record<string, string> = {\n//         Mon: \"Mo, Mon\",\n//         Tue: \"Di, Tue\",\n//         Wed: \"Mi, Wed\",\n//         Thu: \"Do, Thu\",\n//         Fri: \"Fr, Fri\",\n//         Sat: \"Sa, Sat\",\n//         Sun: \"So, Sun\"\n//     };\n//\n//\n//     const counter = () => {\n//         setZaehler(prevCount => prevCount + 1); // Zustand aktualisieren\n//     }\n//\n//\n//     //NFC-Reader\n//     //Eingabe des NFC-Scanners wird verarbeitet\n//     const handleScan = async (data: string) => {\n//         if (data !== \"\") {\n//             setEingabe(data);\n//             await fetchData(data); // Warte auf die Datenabfrage, bevor du fortfährst\n//             setAbfrage(true);\n//\n//         } else {\n//             alert(\"Leer nicht möglich\");\n//         }\n//     };\n//\n//     //Im Falle eines Fehlers wird dieser ausgegeben\n//     const handleError = (err: any) => {\n//         console.error(err);\n//     };\n//\n//\n//     //API-Abfrage\n//     const fetchData = async (input: string) => {\n//         try {\n//             const trimmedInput = input.trim();\n//             if (trimmedInput !== \"\") {\n//                 const ausgabeResponse = await fetch(`https://supporter.kulturkosmos.de/api/self-service/shifts/${trimmedInput}`);\n//\n//                 if (!ausgabeResponse.ok) {\n//                     throw new Error('Fehler beim Abrufen der Schichtdaten');\n//                 }\n//\n//                 const jsonData = await ausgabeResponse.json();\n//                 const abfrageWarnung = await fetch('https://supporter.kulturkosmos.de/api/self-service/special-information');\n//                 const jsonWarnung = await abfrageWarnung.json();\n//\n//                 if (jsonWarnung.data && jsonWarnung.data.text) {\n//                     const textWithoutTags = jsonWarnung.data.text.replace(/<[^>]*>/g, ' ');\n//                     setWarnung(true);\n//                     setWarnungText(textWithoutTags);\n//                 }\n//\n//                 if (jsonData.data === null) {\n//                     setNoData(true);\n//                     setData(false);\n//                     setWarnung(false);\n//                 } else {\n//                     setData(jsonData);\n//                 }\n//             }\n//         } catch (error) {\n//             console.error('Fehler beim Abrufen der Daten:', error);\n//         }\n//     };\n//\n//\n//     //useEffect\n//     useEffect(() => {\n//         if (noData) {\n//             const timer = setTimeout(() => {\n//                 setNoData(false);\n//                 setWarnung(false);\n//                 setAbfrage(false);\n//             },kurz); // 3 seconds\n//             return () => clearTimeout(timer);\n//         }\n//\n//         if (abfrage) {\n//             const timeoutDauer = warnung ? lang : normal;\n//             const timer = setTimeout(() => {\n//                 setAbfrage(false);\n//                 setWarnung(false);\n//                 counter();\n//             }, timeoutDauer);\n//             return () => clearTimeout(timer);\n//         }\n//\n//     }, [abfrage, warnung, normal, lang, kurz,  noData]);\n//\n//\n//\n//     return (\n//         <div>\n//             <div className={\"grundflaeche\"}>\n//                 <div className={!abfrage ? \"box\" : \"box boxleft\"}>\n//                     {!abfrage ? (\n//                         <>\n//                             <h2>Supporter Schichtauskunft</h2>\n//                             <h3>Supporter Shiftinformation</h3>\n//                             <h4 className={\"deutsch\"}>Bitte halte dein Bändsel unter den Scanner</h4>\n//                             <h5 className={\"englisch\"}>Please hold your wristband under the scanner</h5>\n//                             <img src={benzel} alt=\"benzel\" className=\"benzel\" />\n//                         </>\n//                     ) : (\n//                         <>\n//                             {warnung && (\n//                                 <div className={\"scroll-container\"}>\n//                                     <div className={\"warnung\"}>\n//                                         <div className={\"warnung-text\"}>{warnungText}</div>\n//                                     </div>\n//                                 </div>\n//                             )}\n//                             <h2>Supporter Schichtauskunft</h2>\n//                             <h3>Supporter Shiftinformation</h3>\n//                             {data ? (\n//                                 <>\n//                                     <h4 className={\"deutsch-ausgabe\"}>Deine Schichten</h4>\n//                                     <h5 className={\"englisch-ausgabe\"}>Your Shifts</h5>\n//                                     {data.data && data.data.length > 0 ? (\n//                                         data.data\n//                                             .filter((entry: any) => dayjs(entry.startAt).isAfter(exampleDate) || dayjs(entry.startAt).isSame(exampleDate, 'day'))\n//                                             .sort((a: any, b: any) => dayjs(a.startAt).diff(exampleDate) - dayjs(b.startAt).diff(exampleDate))\n//                                             .slice(0, 3)\n//                                             .map((entry: any, index: number) => (\n//                                                 <div className={\"ausgabeabfrage\"} key={index}>\n//                                                     <p className={\"index\"}>{index + 1}</p>\n//                                                     <p className={\"days\"}><strong>{days[dayjs(entry.startAt).format('ddd')]}</strong> // {dayjs(entry.startAt).format('DD.MM - HH:mm')}</p>\n//                                                     {/*<p className={\"vector\"}> <img src={Vector} alt=\"Vector\" className=\"Vector\" /></p>*/}\n//                                                     <p className={\"place\"}><img src={Vector} alt=\"Vector\" className=\"Vector\" /> &nbsp; &nbsp; &nbsp;  {waitingSpot[entry.waitingSpot]}</p>\n//                                                     <br />\n//                                                 </div>\n//                                             ))\n//                                     ) : (\n//                                         <p></p>\n//                                     )}\n//                                 </>\n//                             ) : (\n//                                 noData && (\n//                                     <>\n//                                         <h4 className={\"deutsch-ausgabe-no\"}>Keine Informationen</h4>\n//                                         <h5 className={\"englisch-ausgabe-no\"}>No Information</h5>\n//                                     </>\n//                                 )\n//                             )}\n//                         </>\n//                     )}\n//                 </div>\n//                 <img src={Karte} alt={\"Karte\"} className={`Karte${abfrage ? ' in' : ''}`} />\n//                 <img src={Pfeil} alt={\"Pfeil\"} className={`Pfeil ${abfrage ? 'ok' : ''}`}/>\n//                 <img src={Beschriftung} alt={\"Beschriftung\"} className={`Beschriftung ${abfrage ? 'ko' : ''}`}/>\n//             </div>\n//\n//             <div className={\"wip\"}>\n//                 <BarcodeReader\n//                     onError={handleError}\n//                     onScan={handleScan}\n//                 />\n//             </div>\n//\n//             {zaehler}\n//         </div>\n//     );\n// };\n//\n// export default App;\n\n\n\n\n\n\n\n\n\n\n\nimport React, { FC, useEffect, useState } from 'react';\nimport dayjs from \"dayjs\";\nimport './css/App.css';\nimport benzel from '../src/images/app/grafik 1.png';\nimport Vector from '../src/images/app/Vector.png';\nimport Karte from '../src/images/app/map.png';\nimport Pfeil from '../src/images/app/pfeil.png'\nimport Beschriftung from '../src/images/app/beschriftung.png'\nimport BarcodeReader from 'react-barcode-reader';\n\nconst App: FC = () => {\n    const [data, setData] = useState<any>(null);\n    const [eingabe, setEingabe] = useState<string>(\"\");\n    const [abfrage, setAbfrage] = useState<boolean>(false);\n    const [warnung, setWarnung] = useState<boolean>(false);\n    const [warnungText, setWarnungText] = useState<string | null>(null);\n    // const now: dayjs.Dayjs = dayjs(); todo: exampleDate = now\n    const exampleDate = dayjs('2023.01.01');\n    const [noData, setNoData] = useState<boolean>(false);\n    const [zaehler, setZaehler] = useState<number>(0);\n    const [lastScannedId, setLastScannedId] = useState<string>(\"\");\n\n\n    //Zeitangabe Anzeige Abfrage\n    const normal = 10000; // 10 Sekunden -> Normale Abfrage\n    const lang = 18000; // 18 Sekunden -> Abfrage mit Warnung\n    const kurz = 3000; // 3 Sekunden -> Abfrage Falsche ID\n\n\n    // Lookup-Tabellen\n    // Treffpunkt\n    const waitingSpot: Record<string, string> = {\n        bike: \"Fahrrad\",\n        bottle: \"Flasche\",\n        island: \"Insel\",\n        keys: \"Schlüssel\",\n        kitchen: \"Küche\",\n        mic: \"Mikro\",\n        mobile: \"Mobile Zellen\",\n        sofa: \"Sofa\",\n        star: \"Stern\",\n        sun: \"Sonne\",\n        tent: \"Zelt\",\n        tree: \"Baum\",\n        turtle: \"Taube\",\n        window: \"bitte erfragen\"\n    };\n\n    //Übersetzung der Tage\n    const days: Record<string, string> = {\n        Mon: \"Mo, Mon\",\n        Tue: \"Di, Tue\",\n        Wed: \"Mi, Wed\",\n        Thu: \"Do, Thu\",\n        Fri: \"Fr, Fri\",\n        Sat: \"Sa, Sat\",\n        Sun: \"So, Sun\"\n    };\n\n\n    const counter = () => {\n        setZaehler(prevCount => prevCount + 1); // Zustand aktualisieren\n    }\n\n\n    //NFC-Reader\n    //Eingabe des NFC-Scanners wird verarbeitet\n    const handleScan = async (data: string) => {\n        if (data !== \"\" && data !== lastScannedId) {\n            setEingabe(data);\n            setLastScannedId(data);\n            await fetchData(data); // Warte auf die Datenabfrage, bevor du fortfährst\n            setAbfrage(true);\n\n        } else if (data === lastScannedId) {\n            alert(\"Diese ID wurde bereits gescannt.\");\n        } else {\n            alert(\"Leer nicht möglich\");\n        }\n    };\n\n    //Im Falle eines Fehlers wird dieser ausgegeben\n    const handleError = (err: any) => {\n        console.error(err);\n    };\n\n\n    //API-Abfrage\n    const fetchData = async (input: string) => {\n        try {\n            const trimmedInput = input.trim();\n            if (trimmedInput !== \"\") {\n                const ausgabeResponse = await fetch(`https://supporter.kulturkosmos.de/api/self-service/shifts/${trimmedInput}`);\n\n                if (!ausgabeResponse.ok) {\n                    throw new Error('Fehler beim Abrufen der Schichtdaten');\n                }\n\n                const jsonData = await ausgabeResponse.json();\n                const abfrageWarnung = await fetch('https://supporter.kulturkosmos.de/api/self-service/special-information');\n                const jsonWarnung = await abfrageWarnung.json();\n\n                if (jsonWarnung.data && jsonWarnung.data.text) {\n                    const textWithoutTags = jsonWarnung.data.text.replace(/<[^>]*>/g, ' ');\n                    setWarnung(true);\n                    setWarnungText(textWithoutTags);\n                }\n\n                if (jsonData.data === null) {\n                    setNoData(true);\n                    setData(false);\n                    setWarnung(false);\n                } else {\n                    setData(jsonData);\n                }\n            }\n        } catch (error) {\n            console.error('Fehler beim Abrufen der Daten:', error);\n        }\n    };\n\n\n    //useEffect\n    useEffect(() => {\n        if (noData) {\n            const timer = setTimeout(() => {\n                setNoData(false);\n                setWarnung(false);\n                setAbfrage(false);\n            },kurz); // 3 seconds\n            return () => clearTimeout(timer);\n        }\n\n        if (abfrage) {\n            const timeoutDauer = warnung ? lang : normal;\n            const timer = setTimeout(() => {\n                setAbfrage(false);\n                setWarnung(false);\n                counter();\n            }, timeoutDauer);\n            return () => clearTimeout(timer);\n        }\n\n    }, [abfrage, warnung, normal, lang, kurz,  noData]);\n\n\n\n    return (\n        <div>\n            <div className={\"grundflaeche\"}>\n                <div className={!abfrage ? \"box\" : \"box boxleft\"}>\n                    {!abfrage ? (\n                        <>\n                            <h2>Supporter Schichtauskunft</h2>\n                            <h3>Supporter Shiftinformation</h3>\n                            <h4 className={\"deutsch\"}>Bitte halte dein Bändsel unter den Scanner</h4>\n                            <h5 className={\"englisch\"}>Please hold your wristband under the scanner</h5>\n                            <img src={benzel} alt=\"benzel\" className=\"benzel\" />\n                        </>\n                    ) : (\n                        <>\n                            {warnung && (\n                                <div className={\"scroll-container\"}>\n                                    <div className={\"warnung\"}>\n                                        <div className={\"warnung-text\"}>{warnungText}</div>\n                                    </div>\n                                </div>\n                            )}\n                            <h2>Supporter Schichtauskunft</h2>\n                            <h3>Supporter Shiftinformation</h3>\n                            {data ? (\n                                <>\n                                    <h4 className={\"deutsch-ausgabe\"}>Deine Schichten</h4>\n                                    <h5 className={\"englisch-ausgabe\"}>Your Shifts</h5>\n                                    {data.data && data.data.length > 0 ? (\n                                        data.data\n                                            .filter((entry: any) => dayjs(entry.startAt).isAfter(exampleDate) || dayjs(entry.startAt).isSame(exampleDate, 'day'))\n                                            .sort((a: any, b: any) => dayjs(a.startAt).diff(exampleDate) - dayjs(b.startAt).diff(exampleDate))\n                                            .slice(0, 3)\n                                            .map((entry: any, index: number) => (\n                                                <div className={\"ausgabeabfrage\"} key={index}>\n                                                    <p className={\"index\"}>{index + 1}</p>\n                                                    <p className={\"days\"}><strong>{days[dayjs(entry.startAt).format('ddd')]}</strong> // {dayjs(entry.startAt).format('DD.MM - HH:mm')}</p>\n                                                    {/*<p className={\"vector\"}> <img src={Vector} alt=\"Vector\" className=\"Vector\" /></p>*/}\n                                                    <p className={\"place\"}><img src={Vector} alt=\"Vector\" className=\"Vector\" /> &nbsp; &nbsp; &nbsp;  {waitingSpot[entry.waitingSpot]}</p>\n                                                    <br />\n                                                </div>\n                                            ))\n                                    ) : (\n                                        <p></p>\n                                    )}\n                                </>\n                            ) : (\n                                noData && (\n                                    <>\n                                        <h4 className={\"deutsch-ausgabe-no\"}>Keine Informationen</h4>\n                                        <h5 className={\"englisch-ausgabe-no\"}>No Information</h5>\n                                    </>\n                                )\n                            )}\n                        </>\n                    )}\n                </div>\n                <img src={Karte} alt={\"Karte\"} className={`Karte${abfrage ? ' in' : ''}`} />\n                <img src={Pfeil} alt={\"Pfeil\"} className={`Pfeil ${abfrage ? 'ok' : ''}`}/>\n                <img src={Beschriftung} alt={\"Beschriftung\"} className={`Beschriftung ${abfrage ? 'ko' : ''}`}/>\n            </div>\n\n            <div className={\"wip\"}>\n                <BarcodeReader\n                    onError={handleError}\n                    onScan={handleScan}\n                />\n            </div>\n\n            {zaehler}\n        </div>\n    );\n};\n\nexport default App;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}