{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\woof\\\\Documents\\\\AbschlussProjekt\\\\abfrage-api-supporter\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\n// import React, { FC, useEffect, useState} from 'react';\n// import dayjs from \"dayjs\";\n// import './css/App.css'\n// import benzel from \"../src/images/app/grafik 1.png\"\n// import Vector from '../src/images/app/Vector.png'\n// import Karte from '../src/images/app/map.png'\n// import BarcodeReader from 'react-barcode-reader';\n//\n// const App: FC = () => {\n//     // Daten und Eingabe werden deklariert\n//     const [data, setData] = useState<any>(null);\n//     const [eingabe, setEingabe] = useState<string>(\"\");\n//     const [abfrage, setAbfrage] = useState<boolean>(false);\n//     const [warnung, setWarnung] = useState<boolean>(false);\n//     const [warnungText, setWarnungText] = useState<any>(null);\n//     const now: dayjs.Dayjs = dayjs();\n//     const exampleDate = dayjs('2023.01.01'); //todo: exampleDate muss durch now ersetzt werden\n//\n//     // console.log(data);\n//     console.log(warnungText);\n//\n//     //todo: weiter mit fetchData siehe Auskommentierter code\n//     const [noData, setNoData] = useState<boolean>();\n//     console.log(noData);\n//\n//     const [uid, setUid] = useState<string>(\"\");\n//     console.log(uid);\n//\n//     //Verarbeitung der eingabe des NFC-Scanners\n//     const handleScan = async (data: any) => {\n//         if (data !== \"\") {\n//             setUid(data);\n//             setEingabe(data);\n//             await fetchData(); // Warte auf die Datenabfrage, bevor du fortfährst\n//             setAbfrage(true);\n//         } else {\n//             alert(\"Leer nicht möglich\");\n//         }\n//     }\n//     const handleError = (err: any) => {\n//         console.error(err);\n//     }\n//\n//\n//     //Zeit nach der die Ausgabe beendet wird\n//     const normal = 10000; // 10 seconds\n//     const lang = 18000; // 18 seconds\n//\n//\n//     // Array mit Übersetzungen zu den Treffpunkten wird deklariert\n//     const waitingSpot: Record<string, string> = {\n//         bike: \"Fahrrad\",\n//         bottle: \"Flasche\",\n//         island: \"Insel\",\n//         keys: \"Schlüssel\",\n//         kitchen: \"Küche\",\n//         mic: \"Mikro\",\n//         mobile: \"Mobile Zellen\",\n//         sofa: \"Sofa\",\n//         star: \"Stern\",\n//         sun: \"Sonne\",\n//         tent: \"Zelt\",\n//         tree: \"Baum\",\n//         turtle: \"Taube\",\n//         window: \"bitte erfragen\"\n//     }\n//\n//     const days: Record<string, string> = {\n//         Mon: \"Mo, Mon\",\n//         Tue: \"Di, Tue\",\n//         Wed: \"Mi, Wed\",\n//         Thu: \"Do, Thue\",\n//         Fri: \"Fr, Fri\",\n//         Sat: \"Sa, Sat\",\n//         Sun: \"So, Sun\"\n//     }\n//\n//\n//     // const fetchData = async () => {\n//     //     try {\n//     //         if (eingabe.trim() !== \"\") { // Überprüfung, ob Eingabe leer ist\n//     //             const ausgabe = await fetch(`https://supporter.kulturkosmos.de/api/self-service/shifts/${eingabe}`);\n//     //             if (!ausgabe.ok) {\n//     //                 throw new Error('Fehler');\n//     //             }\n//     //             const jsonData = await ausgabe.json();\n//     //             const test = await fetch('https://supporter.kulturkosmos.de/api/self-service/special-information');\n//     //             const jsonTest = await test.json()\n//     //             if(jsonTest.data.text !== null){\n//     //                 setWarnung(true);\n//     //                 setWarnungText(jsonTest.data.text)\n//     //             }\n//     //             console.log(jsonTest.data.text);\n//     //\n//     //             //todo: Der Block hier ist nur zum testen\n//     //\n//     //             // console.log(jsonData.data);\n//     //             // console.log(jsonData.data === null); //todo: Hier weiter!!!!!\n//     //             if(jsonData.data === null){\n//     //                 // console.log(\"Keine Daten\");\n//     //                 setNoData(false);\n//     //                 // console.log(\"Keine Daten:\" + noData);\n//     //             } else {\n//     //                 // console.log(\"Hier sind die Daten:\" + jsonData.data);\n//     //                 setData(true);\n//     //                 // console.log(\"Hier gibt es Daten\" + noData)\n//     //             }\n//     //             setData(jsonData);\n//     //         }\n//     //     } catch (error) {\n//     //         console.error('Error fetching data:', error);\n//     //     }\n//     // };\n//\n//\n//\n//     const fetchData = async () => {\n//         try {\n//             const trimmedInput = eingabe.trim();\n//             if (trimmedInput !== \"\") {\n//                 const ausgabeResponse = await fetch(`https://supporter.kulturkosmos.de/api/self-service/shifts/${trimmedInput}`);\n//\n//                 if (!ausgabeResponse.ok) {\n//                     throw new Error('Fehler beim Abrufen der Schichtdaten');\n//                 }\n//\n//                 const jsonData = await ausgabeResponse.json();\n//                 const testResponse = await fetch('https://supporter.kulturkosmos.de/api/self-service/special-information');\n//                 const jsonTest = await testResponse.json();\n//\n//                 if (jsonTest.data.text) {\n//                     setWarnung(true);\n//                     setWarnungText(jsonTest.data.text);\n//                 }\n//\n//                 console.log(jsonTest.data.text !== null);\n//\n//                 if (jsonData.data === null) {\n//                     setNoData(true);\n//                 } else {\n//                     setData(jsonData);\n//                 }\n//             }\n//         } catch (error) {\n//             console.error('Fehler beim Abrufen der Daten:', error);\n//         }\n//     };\n//\n//\n//\n//\n//\n//     const handleClick = () => {\n//         if(eingabe !== \"\"){\n//             fetchData();\n//             setAbfrage(true);\n//         }else {\n//             alert(\"Leer nicht möglich\")\n//         }\n//\n//     };\n//\n//     // Neu laden der Seite todo: Aktivieren wenn fertig :D ÄNDERN\n//     useEffect(() => {\n//         if (!data || data.data === null) {\n//             // console.log(\"Kein Ergebnis bei der Abfrage\");\n//             const timer = setTimeout(() => {\n//                 setAbfrage(false);\n//             }, 1000); // Timeout von 1 Sekunde\n//             return () => clearTimeout(timer);\n//         }\n//\n//         const timeoutDauer = abfrage && !warnung ? normal : lang;\n//         const timer = setTimeout(() => {\n//             setAbfrage(false);\n//         }, timeoutDauer);\n//\n//         return () => clearTimeout(timer);\n//     }, [abfrage, data, warnung, normal, lang]);\n//\n//     return (\n//         <div>\n//             <div className={\"grundflaeche\"}>\n//                 <div className={!abfrage ? \"box\" : \"box boxleft\"}>\n//                     {!abfrage ? (\n//                         <>\n//                             <h2>Supporter Schichtauskunft</h2>\n//                             <h3>Supporter Shiftinformation</h3>\n//                             <h4 className={\"deutsch\"}>Bitte halte dein Bändsel unter den Scanner</h4>\n//                             <h5 className={\"englisch\"}>Please hold your wristband under the scanner</h5>\n//                             <img src={benzel} alt=\"benzel\" className=\"benzel\" />\n//                         </>\n//                     ) :  (\n//                         <>\n//                             {warnung && (\n//                                 <div className={\"scroll-container\"}>\n//                                     <div className={\"warnung\"}>\n//                                         <div className={\"warnung-text\"}>{warnungText}</div>\n//                                     </div>\n//                                 </div>\n//                             )}\n//                             <h2>Supporter Schichtauskunft</h2>\n//                             <h3>Supporter Shiftinformation</h3>\n//                             <h4 className={\"deutsch-ausgabe\"}>Deine Schichten</h4>\n//                             <h5 className={\"englisch-ausgabe\"}>Your Shifts</h5>\n//\n//                             {/* Sortierung nur, wenn Daten vorhanden sind */}\n//                             {data && data.data && data.data.length > 0 && (\n//                                 <>\n//                                     {data.data\n//                                         //Filtern nach Datum\n//                                         .filter((entry: any) => dayjs(entry.startAt).isAfter(exampleDate) || dayjs(entry.startAt).isSame(exampleDate, 'day'))\n//                                         //Sortieren\n//                                         .sort((a: any, b: any) => dayjs(a.startAt).diff(exampleDate) - dayjs(b.startAt).diff(exampleDate))\n//                                         // Ausgabe von index 0 dann die ersten 3 -> 0, 1, 2\n//                                         .slice(0, 3)\n//\n//                                         .map((entry: any, index: number) => (\n//                                             <div className={\"ausgabeabfrage\"} key={index}>\n//                                                 <p className={\"index\"}>{index + 1}</p>\n//                                                 {/*Anzeige des Wochentags und des Datums im gewünschten Format*/}\n//                                                 <p className={\"days\"}><strong>{days[dayjs(entry.startAt).format('ddd')]}</strong> // {dayjs(entry.startAt).format('DD.MM - HH:mm')}</p>\n//                                                 {/*Anzeigen des Vectors*/}\n//                                                 <p className={\"vector\"}> <img src={Vector} alt=\"Vector\" className=\"Vector\" /></p>\n//                                                 {/*Anzeige des Wartebereichs*/}\n//                                                 <p className={\"place\"}>{waitingSpot[entry.waitingSpot]}</p>\n//                                                 <br />\n//                                             </div>\n//                                         ))\n//                                     }\n//                                 </>\n//                             )}\n//                         </>\n//\n//                     )}\n//                 </div>\n//                 <img src={Karte} alt={\"Karte\"} className={`Karte${abfrage ? ' in' : ''}`}  />\n//             </div>\n//\n//             <div className={\"wip\"}>\n//                 {/*<input*/}\n//                 {/*    type=\"text\"*/}\n//                 {/*    placeholder=\"ID\"*/}\n//                 {/*    value={eingabe}*/}\n//                 {/*    onChange={(e) => setEingabe(e.target.value)}*/}\n//                 {/*/>*/}\n//                 {/*<button onClick={handleClick}>Abfragen</button>*/}\n//                 {/*<button onClick={() => window.location.reload()}>Reset</button>*/}\n//                 {/*<button onClick={() => setEingabe(\"0492131A757780\")}>0492131A757780</button>*/}\n//                 {/*<button onClick={() => setEingabe(\"04ABE51A757780\")}>04ABE51A757780</button>*/}\n//                 {/*<button onClick={() => setEingabe(\"048DCC1A757780\")}>048DCC1A757780</button>*/}\n//                 {/*<button onClick={() => setEingabe(\"04E0FD1A757780\")} style={{ backgroundColor: 'green' }}>04E0FD1A757780</button>*/}\n//                 {/*<button onClick={() => setEingabe(\"049E0D1A757784\")}>049E0D1A757784</button>*/}\n//                 {/*<button onClick={() => setEingabe(\"0433541A757780\")}>0433541A757780</button>*/}\n//                 {/*<button onClick={() => setEingabe(\"04BB2B6ABE6F80\")}>04BB2B6ABE6F80</button>*/}\n//                 {/*<button onClick={() => setEingabe(\"04E0dwedefregfrfgrfgFD1A757780\")} style={{ backgroundColor: 'red' }}>04E0FD1A757780</button>*/}\n//\n//                 {/*<button onClick={() => setWarnung(true)}>Warnung An</button>*/}\n//                 {/*<button onClick={() => setWarnung(false)}>Warnung Aus</button>*/}\n//\n//\n//\n//                 <BarcodeReader\n//                     onError={handleError}\n//                     onScan={handleScan}\n//                 />\n//                 {/*{uid && <p>Barcode detected: {uid}</p>}*/}\n//             </div>\n//         </div>\n//     );\n// };\n//\n// export default App;\n\nimport React, { useEffect, useState } from 'react';\nimport dayjs from \"dayjs\";\nimport './css/App.css';\nimport benzel from '../src/images/app/grafik 1.png';\nimport Vector from '../src/images/app/Vector.png';\nimport Karte from '../src/images/app/map.png';\nimport BarcodeReader from 'react-barcode-reader';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [data, setData] = useState(null);\n  const [eingabe, setEingabe] = useState(\"\");\n  const [abfrage, setAbfrage] = useState(false);\n  const [warnung, setWarnung] = useState(false);\n  const [warnungText, setWarnungText] = useState(null);\n  const now = dayjs();\n  const exampleDate = dayjs('2023.01.01');\n  const [noData, setNoData] = useState(false);\n  const [uid, setUid] = useState(\"\");\n  const handleScan = async data => {\n    if (data !== \"\") {\n      setUid(data);\n      setEingabe(data);\n      await fetchData(data); // Warte auf die Datenabfrage, bevor du fortfährst\n      setAbfrage(true);\n    } else {\n      alert(\"Leer nicht möglich\");\n    }\n  };\n  const handleError = err => {\n    console.error(err);\n  };\n  const normal = 10000; // 10 seconds\n  const lang = 18000; // 18 seconds\n\n  const waitingSpot = {\n    bike: \"Fahrrad\",\n    bottle: \"Flasche\",\n    island: \"Insel\",\n    keys: \"Schlüssel\",\n    kitchen: \"Küche\",\n    mic: \"Mikro\",\n    mobile: \"Mobile Zellen\",\n    sofa: \"Sofa\",\n    star: \"Stern\",\n    sun: \"Sonne\",\n    tent: \"Zelt\",\n    tree: \"Baum\",\n    turtle: \"Taube\",\n    window: \"bitte erfragen\"\n  };\n  const days = {\n    Mon: \"Mo, Mon\",\n    Tue: \"Di, Tue\",\n    Wed: \"Mi, Wed\",\n    Thu: \"Do, Thu\",\n    Fri: \"Fr, Fri\",\n    Sat: \"Sa, Sat\",\n    Sun: \"So, Sun\"\n  };\n  const fetchData = async input => {\n    try {\n      const trimmedInput = input.trim();\n      if (trimmedInput !== \"\") {\n        const ausgabeResponse = await fetch(`https://supporter.kulturkosmos.de/api/self-service/shifts/${trimmedInput}`);\n        if (!ausgabeResponse.ok) {\n          throw new Error('Fehler beim Abrufen der Schichtdaten');\n        }\n        const jsonData = await ausgabeResponse.json();\n        const testResponse = await fetch('https://supporter.kulturkosmos.de/api/self-service/special-information');\n        const jsonTest = await testResponse.json();\n        if (jsonTest.data && jsonTest.data.text) {\n          console.log(jsonTest.data.text);\n          setWarnung(true);\n          setWarnungText(jsonTest.data.text);\n        }\n        if (jsonData.data === null) {\n          setNoData(true);\n        } else {\n          setData(jsonData);\n        }\n      }\n    } catch (error) {\n      console.error('Fehler beim Abrufen der Daten:', error);\n    }\n  };\n  const handleClick = () => {\n    if (eingabe !== \"\") {\n      fetchData(eingabe);\n      setAbfrage(true);\n    } else {\n      alert(\"Leer nicht möglich\");\n    }\n  };\n  useEffect(() => {\n    if (abfrage) {\n      const timeoutDauer = warnung ? lang : normal;\n      const timer = setTimeout(() => {\n        setAbfrage(false);\n      }, timeoutDauer);\n      return () => clearTimeout(timer);\n    }\n  }, [abfrage, warnung, normal, lang]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grundflaeche\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: !abfrage ? \"box\" : \"box boxleft\",\n        children: !abfrage ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Supporter Schichtauskunft\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 413,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Supporter Shiftinformation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 414,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"deutsch\",\n            children: \"Bitte halte dein B\\xE4ndsel unter den Scanner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"englisch\",\n            children: \"Please hold your wristband under the scanner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: benzel,\n            alt: \"benzel\",\n            className: \"benzel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [warnung && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"scroll-container\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"warnung\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"warnung-text\",\n                children: warnungText\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 424,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Supporter Schichtauskunft\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Supporter Shiftinformation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"deutsch-ausgabe\",\n            children: \"Deine Schichten\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"englisch-ausgabe\",\n            children: \"Your Shifts\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 29\n          }, this), data && data.data && data.data.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: data.data.filter(entry => dayjs(entry.startAt).isAfter(exampleDate) || dayjs(entry.startAt).isSame(exampleDate, 'day')).sort((a, b) => dayjs(a.startAt).diff(exampleDate) - dayjs(b.startAt).diff(exampleDate)).slice(0, 3).map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ausgabeabfrage\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"index\",\n                children: index + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 441,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"days\",\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: days[dayjs(entry.startAt).format('ddd')]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 442,\n                  columnNumber: 71\n                }, this), \" // \", dayjs(entry.startAt).format('DD.MM - HH:mm')]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 442,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"vector\",\n                children: [\" \", /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: Vector,\n                  alt: \"Vector\",\n                  className: \"Vector\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 443,\n                  columnNumber: 74\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 443,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"place\",\n                children: waitingSpot[entry.waitingSpot]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 444,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 445,\n                columnNumber: 49\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 440,\n              columnNumber: 45\n            }, this))\n          }, void 0, false)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: Karte,\n        alt: \"Karte\",\n        className: `Karte${abfrage ? ' in' : ''}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wip\",\n      children: /*#__PURE__*/_jsxDEV(BarcodeReader, {\n        onError: handleError,\n        onScan: handleScan\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 408,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"pWWAAHbOws9yUuWtQF4yJiMusQc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","dayjs","benzel","Vector","Karte","BarcodeReader","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","data","setData","eingabe","setEingabe","abfrage","setAbfrage","warnung","setWarnung","warnungText","setWarnungText","now","exampleDate","noData","setNoData","uid","setUid","handleScan","fetchData","alert","handleError","err","console","error","normal","lang","waitingSpot","bike","bottle","island","keys","kitchen","mic","mobile","sofa","star","sun","tent","tree","turtle","window","days","Mon","Tue","Wed","Thu","Fri","Sat","Sun","input","trimmedInput","trim","ausgabeResponse","fetch","ok","Error","jsonData","json","testResponse","jsonTest","text","log","handleClick","timeoutDauer","timer","setTimeout","clearTimeout","children","className","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","length","filter","entry","startAt","isAfter","isSame","sort","a","b","diff","slice","map","index","format","onError","onScan","_c","$RefreshReg$"],"sources":["C:/Users/woof/Documents/AbschlussProjekt/abfrage-api-supporter/src/App.tsx"],"sourcesContent":["// import React, { FC, useEffect, useState} from 'react';\r\n// import dayjs from \"dayjs\";\r\n// import './css/App.css'\r\n// import benzel from \"../src/images/app/grafik 1.png\"\r\n// import Vector from '../src/images/app/Vector.png'\r\n// import Karte from '../src/images/app/map.png'\r\n// import BarcodeReader from 'react-barcode-reader';\r\n//\r\n// const App: FC = () => {\r\n//     // Daten und Eingabe werden deklariert\r\n//     const [data, setData] = useState<any>(null);\r\n//     const [eingabe, setEingabe] = useState<string>(\"\");\r\n//     const [abfrage, setAbfrage] = useState<boolean>(false);\r\n//     const [warnung, setWarnung] = useState<boolean>(false);\r\n//     const [warnungText, setWarnungText] = useState<any>(null);\r\n//     const now: dayjs.Dayjs = dayjs();\r\n//     const exampleDate = dayjs('2023.01.01'); //todo: exampleDate muss durch now ersetzt werden\r\n//\r\n//     // console.log(data);\r\n//     console.log(warnungText);\r\n//\r\n//     //todo: weiter mit fetchData siehe Auskommentierter code\r\n//     const [noData, setNoData] = useState<boolean>();\r\n//     console.log(noData);\r\n//\r\n//     const [uid, setUid] = useState<string>(\"\");\r\n//     console.log(uid);\r\n//\r\n//     //Verarbeitung der eingabe des NFC-Scanners\r\n//     const handleScan = async (data: any) => {\r\n//         if (data !== \"\") {\r\n//             setUid(data);\r\n//             setEingabe(data);\r\n//             await fetchData(); // Warte auf die Datenabfrage, bevor du fortfährst\r\n//             setAbfrage(true);\r\n//         } else {\r\n//             alert(\"Leer nicht möglich\");\r\n//         }\r\n//     }\r\n//     const handleError = (err: any) => {\r\n//         console.error(err);\r\n//     }\r\n//\r\n//\r\n//     //Zeit nach der die Ausgabe beendet wird\r\n//     const normal = 10000; // 10 seconds\r\n//     const lang = 18000; // 18 seconds\r\n//\r\n//\r\n//     // Array mit Übersetzungen zu den Treffpunkten wird deklariert\r\n//     const waitingSpot: Record<string, string> = {\r\n//         bike: \"Fahrrad\",\r\n//         bottle: \"Flasche\",\r\n//         island: \"Insel\",\r\n//         keys: \"Schlüssel\",\r\n//         kitchen: \"Küche\",\r\n//         mic: \"Mikro\",\r\n//         mobile: \"Mobile Zellen\",\r\n//         sofa: \"Sofa\",\r\n//         star: \"Stern\",\r\n//         sun: \"Sonne\",\r\n//         tent: \"Zelt\",\r\n//         tree: \"Baum\",\r\n//         turtle: \"Taube\",\r\n//         window: \"bitte erfragen\"\r\n//     }\r\n//\r\n//     const days: Record<string, string> = {\r\n//         Mon: \"Mo, Mon\",\r\n//         Tue: \"Di, Tue\",\r\n//         Wed: \"Mi, Wed\",\r\n//         Thu: \"Do, Thue\",\r\n//         Fri: \"Fr, Fri\",\r\n//         Sat: \"Sa, Sat\",\r\n//         Sun: \"So, Sun\"\r\n//     }\r\n//\r\n//\r\n//     // const fetchData = async () => {\r\n//     //     try {\r\n//     //         if (eingabe.trim() !== \"\") { // Überprüfung, ob Eingabe leer ist\r\n//     //             const ausgabe = await fetch(`https://supporter.kulturkosmos.de/api/self-service/shifts/${eingabe}`);\r\n//     //             if (!ausgabe.ok) {\r\n//     //                 throw new Error('Fehler');\r\n//     //             }\r\n//     //             const jsonData = await ausgabe.json();\r\n//     //             const test = await fetch('https://supporter.kulturkosmos.de/api/self-service/special-information');\r\n//     //             const jsonTest = await test.json()\r\n//     //             if(jsonTest.data.text !== null){\r\n//     //                 setWarnung(true);\r\n//     //                 setWarnungText(jsonTest.data.text)\r\n//     //             }\r\n//     //             console.log(jsonTest.data.text);\r\n//     //\r\n//     //             //todo: Der Block hier ist nur zum testen\r\n//     //\r\n//     //             // console.log(jsonData.data);\r\n//     //             // console.log(jsonData.data === null); //todo: Hier weiter!!!!!\r\n//     //             if(jsonData.data === null){\r\n//     //                 // console.log(\"Keine Daten\");\r\n//     //                 setNoData(false);\r\n//     //                 // console.log(\"Keine Daten:\" + noData);\r\n//     //             } else {\r\n//     //                 // console.log(\"Hier sind die Daten:\" + jsonData.data);\r\n//     //                 setData(true);\r\n//     //                 // console.log(\"Hier gibt es Daten\" + noData)\r\n//     //             }\r\n//     //             setData(jsonData);\r\n//     //         }\r\n//     //     } catch (error) {\r\n//     //         console.error('Error fetching data:', error);\r\n//     //     }\r\n//     // };\r\n//\r\n//\r\n//\r\n//     const fetchData = async () => {\r\n//         try {\r\n//             const trimmedInput = eingabe.trim();\r\n//             if (trimmedInput !== \"\") {\r\n//                 const ausgabeResponse = await fetch(`https://supporter.kulturkosmos.de/api/self-service/shifts/${trimmedInput}`);\r\n//\r\n//                 if (!ausgabeResponse.ok) {\r\n//                     throw new Error('Fehler beim Abrufen der Schichtdaten');\r\n//                 }\r\n//\r\n//                 const jsonData = await ausgabeResponse.json();\r\n//                 const testResponse = await fetch('https://supporter.kulturkosmos.de/api/self-service/special-information');\r\n//                 const jsonTest = await testResponse.json();\r\n//\r\n//                 if (jsonTest.data.text) {\r\n//                     setWarnung(true);\r\n//                     setWarnungText(jsonTest.data.text);\r\n//                 }\r\n//\r\n//                 console.log(jsonTest.data.text !== null);\r\n//\r\n//                 if (jsonData.data === null) {\r\n//                     setNoData(true);\r\n//                 } else {\r\n//                     setData(jsonData);\r\n//                 }\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Fehler beim Abrufen der Daten:', error);\r\n//         }\r\n//     };\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//     const handleClick = () => {\r\n//         if(eingabe !== \"\"){\r\n//             fetchData();\r\n//             setAbfrage(true);\r\n//         }else {\r\n//             alert(\"Leer nicht möglich\")\r\n//         }\r\n//\r\n//     };\r\n//\r\n//     // Neu laden der Seite todo: Aktivieren wenn fertig :D ÄNDERN\r\n//     useEffect(() => {\r\n//         if (!data || data.data === null) {\r\n//             // console.log(\"Kein Ergebnis bei der Abfrage\");\r\n//             const timer = setTimeout(() => {\r\n//                 setAbfrage(false);\r\n//             }, 1000); // Timeout von 1 Sekunde\r\n//             return () => clearTimeout(timer);\r\n//         }\r\n//\r\n//         const timeoutDauer = abfrage && !warnung ? normal : lang;\r\n//         const timer = setTimeout(() => {\r\n//             setAbfrage(false);\r\n//         }, timeoutDauer);\r\n//\r\n//         return () => clearTimeout(timer);\r\n//     }, [abfrage, data, warnung, normal, lang]);\r\n//\r\n//     return (\r\n//         <div>\r\n//             <div className={\"grundflaeche\"}>\r\n//                 <div className={!abfrage ? \"box\" : \"box boxleft\"}>\r\n//                     {!abfrage ? (\r\n//                         <>\r\n//                             <h2>Supporter Schichtauskunft</h2>\r\n//                             <h3>Supporter Shiftinformation</h3>\r\n//                             <h4 className={\"deutsch\"}>Bitte halte dein Bändsel unter den Scanner</h4>\r\n//                             <h5 className={\"englisch\"}>Please hold your wristband under the scanner</h5>\r\n//                             <img src={benzel} alt=\"benzel\" className=\"benzel\" />\r\n//                         </>\r\n//                     ) :  (\r\n//                         <>\r\n//                             {warnung && (\r\n//                                 <div className={\"scroll-container\"}>\r\n//                                     <div className={\"warnung\"}>\r\n//                                         <div className={\"warnung-text\"}>{warnungText}</div>\r\n//                                     </div>\r\n//                                 </div>\r\n//                             )}\r\n//                             <h2>Supporter Schichtauskunft</h2>\r\n//                             <h3>Supporter Shiftinformation</h3>\r\n//                             <h4 className={\"deutsch-ausgabe\"}>Deine Schichten</h4>\r\n//                             <h5 className={\"englisch-ausgabe\"}>Your Shifts</h5>\r\n//\r\n//                             {/* Sortierung nur, wenn Daten vorhanden sind */}\r\n//                             {data && data.data && data.data.length > 0 && (\r\n//                                 <>\r\n//                                     {data.data\r\n//                                         //Filtern nach Datum\r\n//                                         .filter((entry: any) => dayjs(entry.startAt).isAfter(exampleDate) || dayjs(entry.startAt).isSame(exampleDate, 'day'))\r\n//                                         //Sortieren\r\n//                                         .sort((a: any, b: any) => dayjs(a.startAt).diff(exampleDate) - dayjs(b.startAt).diff(exampleDate))\r\n//                                         // Ausgabe von index 0 dann die ersten 3 -> 0, 1, 2\r\n//                                         .slice(0, 3)\r\n//\r\n//                                         .map((entry: any, index: number) => (\r\n//                                             <div className={\"ausgabeabfrage\"} key={index}>\r\n//                                                 <p className={\"index\"}>{index + 1}</p>\r\n//                                                 {/*Anzeige des Wochentags und des Datums im gewünschten Format*/}\r\n//                                                 <p className={\"days\"}><strong>{days[dayjs(entry.startAt).format('ddd')]}</strong> // {dayjs(entry.startAt).format('DD.MM - HH:mm')}</p>\r\n//                                                 {/*Anzeigen des Vectors*/}\r\n//                                                 <p className={\"vector\"}> <img src={Vector} alt=\"Vector\" className=\"Vector\" /></p>\r\n//                                                 {/*Anzeige des Wartebereichs*/}\r\n//                                                 <p className={\"place\"}>{waitingSpot[entry.waitingSpot]}</p>\r\n//                                                 <br />\r\n//                                             </div>\r\n//                                         ))\r\n//                                     }\r\n//                                 </>\r\n//                             )}\r\n//                         </>\r\n//\r\n//                     )}\r\n//                 </div>\r\n//                 <img src={Karte} alt={\"Karte\"} className={`Karte${abfrage ? ' in' : ''}`}  />\r\n//             </div>\r\n//\r\n//             <div className={\"wip\"}>\r\n//                 {/*<input*/}\r\n//                 {/*    type=\"text\"*/}\r\n//                 {/*    placeholder=\"ID\"*/}\r\n//                 {/*    value={eingabe}*/}\r\n//                 {/*    onChange={(e) => setEingabe(e.target.value)}*/}\r\n//                 {/*/>*/}\r\n//                 {/*<button onClick={handleClick}>Abfragen</button>*/}\r\n//                 {/*<button onClick={() => window.location.reload()}>Reset</button>*/}\r\n//                 {/*<button onClick={() => setEingabe(\"0492131A757780\")}>0492131A757780</button>*/}\r\n//                 {/*<button onClick={() => setEingabe(\"04ABE51A757780\")}>04ABE51A757780</button>*/}\r\n//                 {/*<button onClick={() => setEingabe(\"048DCC1A757780\")}>048DCC1A757780</button>*/}\r\n//                 {/*<button onClick={() => setEingabe(\"04E0FD1A757780\")} style={{ backgroundColor: 'green' }}>04E0FD1A757780</button>*/}\r\n//                 {/*<button onClick={() => setEingabe(\"049E0D1A757784\")}>049E0D1A757784</button>*/}\r\n//                 {/*<button onClick={() => setEingabe(\"0433541A757780\")}>0433541A757780</button>*/}\r\n//                 {/*<button onClick={() => setEingabe(\"04BB2B6ABE6F80\")}>04BB2B6ABE6F80</button>*/}\r\n//                 {/*<button onClick={() => setEingabe(\"04E0dwedefregfrfgrfgFD1A757780\")} style={{ backgroundColor: 'red' }}>04E0FD1A757780</button>*/}\r\n//\r\n//                 {/*<button onClick={() => setWarnung(true)}>Warnung An</button>*/}\r\n//                 {/*<button onClick={() => setWarnung(false)}>Warnung Aus</button>*/}\r\n//\r\n//\r\n//\r\n//                 <BarcodeReader\r\n//                     onError={handleError}\r\n//                     onScan={handleScan}\r\n//                 />\r\n//                 {/*{uid && <p>Barcode detected: {uid}</p>}*/}\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n//\r\n// export default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { FC, useEffect, useState } from 'react';\r\nimport dayjs from \"dayjs\";\r\nimport './css/App.css'\r\nimport benzel from '../src/images/app/grafik 1.png'\r\nimport Vector from '../src/images/app/Vector.png'\r\nimport Karte from '../src/images/app/map.png'\r\nimport BarcodeReader from 'react-barcode-reader';\r\n\r\nconst App: FC = () => {\r\n    const [data, setData] = useState<any>(null);\r\n    const [eingabe, setEingabe] = useState<string>(\"\");\r\n    const [abfrage, setAbfrage] = useState<boolean>(false);\r\n    const [warnung, setWarnung] = useState<boolean>(false);\r\n    const [warnungText, setWarnungText] = useState<string | null>(null);\r\n    const now: dayjs.Dayjs = dayjs();\r\n    const exampleDate = dayjs('2023.01.01');\r\n\r\n    const [noData, setNoData] = useState<boolean>(false);\r\n    const [uid, setUid] = useState<string>(\"\");\r\n\r\n    const handleScan = async (data: string) => {\r\n        if (data !== \"\") {\r\n            setUid(data);\r\n            setEingabe(data);\r\n            await fetchData(data); // Warte auf die Datenabfrage, bevor du fortfährst\r\n            setAbfrage(true);\r\n        } else {\r\n            alert(\"Leer nicht möglich\");\r\n        }\r\n    };\r\n\r\n    const handleError = (err: any) => {\r\n        console.error(err);\r\n    };\r\n\r\n    const normal = 10000; // 10 seconds\r\n    const lang = 18000; // 18 seconds\r\n\r\n    const waitingSpot: Record<string, string> = {\r\n        bike: \"Fahrrad\",\r\n        bottle: \"Flasche\",\r\n        island: \"Insel\",\r\n        keys: \"Schlüssel\",\r\n        kitchen: \"Küche\",\r\n        mic: \"Mikro\",\r\n        mobile: \"Mobile Zellen\",\r\n        sofa: \"Sofa\",\r\n        star: \"Stern\",\r\n        sun: \"Sonne\",\r\n        tent: \"Zelt\",\r\n        tree: \"Baum\",\r\n        turtle: \"Taube\",\r\n        window: \"bitte erfragen\"\r\n    };\r\n\r\n    const days: Record<string, string> = {\r\n        Mon: \"Mo, Mon\",\r\n        Tue: \"Di, Tue\",\r\n        Wed: \"Mi, Wed\",\r\n        Thu: \"Do, Thu\",\r\n        Fri: \"Fr, Fri\",\r\n        Sat: \"Sa, Sat\",\r\n        Sun: \"So, Sun\"\r\n    };\r\n\r\n    const fetchData = async (input: string) => {\r\n        try {\r\n            const trimmedInput = input.trim();\r\n            if (trimmedInput !== \"\") {\r\n                const ausgabeResponse = await fetch(`https://supporter.kulturkosmos.de/api/self-service/shifts/${trimmedInput}`);\r\n\r\n                if (!ausgabeResponse.ok) {\r\n                    throw new Error('Fehler beim Abrufen der Schichtdaten');\r\n                }\r\n\r\n                const jsonData = await ausgabeResponse.json();\r\n                const testResponse = await fetch('https://supporter.kulturkosmos.de/api/self-service/special-information');\r\n                const jsonTest = await testResponse.json();\r\n\r\n                if (jsonTest.data && jsonTest.data.text) {\r\n                    console.log(jsonTest.data.text);\r\n                    setWarnung(true);\r\n                    setWarnungText(jsonTest.data.text);\r\n                }\r\n\r\n                if (jsonData.data === null) {\r\n                    setNoData(true);\r\n                } else {\r\n                    setData(jsonData);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Fehler beim Abrufen der Daten:', error);\r\n        }\r\n    };\r\n\r\n    const handleClick = () => {\r\n        if (eingabe !== \"\") {\r\n            fetchData(eingabe);\r\n            setAbfrage(true);\r\n        } else {\r\n            alert(\"Leer nicht möglich\")\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (abfrage) {\r\n            const timeoutDauer = warnung ? lang : normal;\r\n            const timer = setTimeout(() => {\r\n                setAbfrage(false);\r\n            }, timeoutDauer);\r\n\r\n            return () => clearTimeout(timer);\r\n        }\r\n    }, [abfrage, warnung, normal, lang]);\r\n\r\n    return (\r\n        <div>\r\n            <div className={\"grundflaeche\"}>\r\n                <div className={!abfrage ? \"box\" : \"box boxleft\"}>\r\n                    {!abfrage ? (\r\n                        <>\r\n                            <h2>Supporter Schichtauskunft</h2>\r\n                            <h3>Supporter Shiftinformation</h3>\r\n                            <h4 className={\"deutsch\"}>Bitte halte dein Bändsel unter den Scanner</h4>\r\n                            <h5 className={\"englisch\"}>Please hold your wristband under the scanner</h5>\r\n                            <img src={benzel} alt=\"benzel\" className=\"benzel\" />\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            {warnung && (\r\n                                <div className={\"scroll-container\"}>\r\n                                    <div className={\"warnung\"}>\r\n                                        <div className={\"warnung-text\"}>{warnungText}</div>\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                            <h2>Supporter Schichtauskunft</h2>\r\n                            <h3>Supporter Shiftinformation</h3>\r\n                            <h4 className={\"deutsch-ausgabe\"}>Deine Schichten</h4>\r\n                            <h5 className={\"englisch-ausgabe\"}>Your Shifts</h5>\r\n\r\n                            {data && data.data && data.data.length > 0 && (\r\n                                <>\r\n                                    {data.data\r\n                                        .filter((entry: any) => dayjs(entry.startAt).isAfter(exampleDate) || dayjs(entry.startAt).isSame(exampleDate, 'day'))\r\n                                        .sort((a: any, b: any) => dayjs(a.startAt).diff(exampleDate) - dayjs(b.startAt).diff(exampleDate))\r\n                                        .slice(0, 3)\r\n                                        .map((entry: any, index: number) => (\r\n                                            <div className={\"ausgabeabfrage\"} key={index}>\r\n                                                <p className={\"index\"}>{index + 1}</p>\r\n                                                <p className={\"days\"}><strong>{days[dayjs(entry.startAt).format('ddd')]}</strong> // {dayjs(entry.startAt).format('DD.MM - HH:mm')}</p>\r\n                                                <p className={\"vector\"}> <img src={Vector} alt=\"Vector\" className=\"Vector\" /></p>\r\n                                                <p className={\"place\"}>{waitingSpot[entry.waitingSpot]}</p>\r\n                                                <br />\r\n                                            </div>\r\n                                        ))\r\n                                    }\r\n                                </>\r\n                            )}\r\n                        </>\r\n                    )}\r\n                </div>\r\n                <img src={Karte} alt={\"Karte\"} className={`Karte${abfrage ? ' in' : ''}`} />\r\n            </div>\r\n\r\n            <div className={\"wip\"}>\r\n                <BarcodeReader\r\n                    onError={handleError}\r\n                    onScan={handleScan}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}