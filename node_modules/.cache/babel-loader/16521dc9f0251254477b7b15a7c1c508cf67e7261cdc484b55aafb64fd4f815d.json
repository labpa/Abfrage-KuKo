{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\woof\\\\Documents\\\\AbschlussProjekt\\\\abfrage-api-supporter\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\n// App.tsx\n\nimport React, { useEffect, useState } from 'react';\nimport dayjs from \"dayjs\";\nimport './css/App.css';\nimport BarcodeReader from 'react-barcode-reader';\nimport { fetchShiftData, fetchSpecialInformation } from './api';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [data, setData] = useState(null);\n  const [abfrage, setAbfrage] = useState(false);\n  const [warnung, setWarnung] = useState(false);\n  const [warnungText, setWarnungText] = useState(null);\n  const [noData, setNoData] = useState(false);\n  const [uid, setUid] = useState(\"\");\n  const exampleDate = dayjs('2023-01-01');\n  const waitingSpot = {\n    bike: \"Fahrrad\",\n    bottle: \"Flasche\"\n    // andere Einträge...\n  };\n  const days = {\n    Mon: \"Mo, Mon\"\n    // andere Einträge...\n  };\n  const handleScan = async data => {\n    if (data !== \"\") {\n      setUid(data);\n      await fetchData(data);\n      setAbfrage(true);\n    } else {\n      alert(\"Leer nicht möglich\");\n    }\n  };\n  const handleError = err => {\n    console.error(err);\n  };\n  useEffect(() => {\n    const fetchData = async input => {\n      try {\n        const trimmedInput = input.trim();\n        if (trimmedInput !== \"\") {\n          const ausgabeResponse = await fetchShiftData(trimmedInput);\n          if (!ausgabeResponse.ok) {\n            throw new Error('Fehler beim Abrufen der Schichtdaten');\n          }\n          const jsonData = await ausgabeResponse.json();\n          const testResponse = await fetchSpecialInformation();\n          if (testResponse.ok) {\n            const jsonTest = await testResponse.json();\n            if (jsonTest.data && jsonTest.data.text) {\n              setWarnung(true);\n              setWarnungText(jsonTest.data.text);\n            }\n          }\n          if (jsonData.data === null) {\n            setNoData(true);\n          } else {\n            setData(jsonData);\n          }\n        }\n      } catch (error) {\n        console.error('Fehler beim Abrufen der Daten:', error);\n      }\n    };\n    if (abfrage) {\n      const timeoutDauer = warnung ? 18000 : 10000;\n      const timer = setTimeout(() => {\n        setAbfrage(false);\n        setWarnung(false);\n      }, timeoutDauer);\n      return () => clearTimeout(timer);\n    }\n  }, [abfrage, warnung]);\n  useEffect(() => {\n    if (noData) {\n      const timer = setTimeout(() => {\n        setNoData(false);\n        setWarnung(false);\n        setAbfrage(false);\n      }, 3000);\n      return () => clearTimeout(timer);\n    }\n  }, [noData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grundflaeche\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: !abfrage ? \"box\" : \"box boxleft\",\n        children: !abfrage ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Supporter Schichtauskunft\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Supporter Shiftinformation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"deutsch\",\n            children: \"Bitte halte dein B\\xE4ndsel unter den Scanner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"englisch\",\n            children: \"Please hold your wristband under the scanner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [warnung && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"scroll-container\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"warnung\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"warnung-text\",\n                children: warnungText\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Supporter Schichtauskunft\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Supporter Shiftinformation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 29\n          }, this), data ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"deutsch-ausgabe\",\n              children: \"Deine Schichten\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"englisch-ausgabe\",\n              children: \"Your Shifts\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 37\n            }, this), data.length > 0 ? data.filter(entry => dayjs(entry.startAt).isAfter(exampleDate) || dayjs(entry.startAt).isSame(exampleDate, 'day')).sort((a, b) => dayjs(a.startAt).diff(exampleDate) - dayjs(b.startAt).diff(exampleDate)).slice(0, 3).map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ausgabeabfrage\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"index\",\n                children: index + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 53\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"days\",\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: days[dayjs(entry.startAt).format('ddd')]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 139,\n                  columnNumber: 75\n                }, this), \" // \", dayjs(entry.startAt).format('DD.MM - HH:mm')]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 53\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"place\",\n                children: waitingSpot[entry.waitingSpot]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 53\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 53\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 49\n            }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true) : noData && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"deutsch-ausgabe-no\",\n              children: \"Keine Informationen\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"englisch-ausgabe-no\",\n              children: \"No Information\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"Karte.jpg\",\n        alt: \"Karte\",\n        className: `Karte${abfrage ? ' in' : ''}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wip\",\n      children: /*#__PURE__*/_jsxDEV(BarcodeReader, {\n        onError: handleError,\n        onScan: handleScan\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"uiYxK6+wUIB16L86fYaWAUaQNTk=\");\n_c = App;\nexport default App;\n\n// import React, { FC, useEffect, useState } from 'react';\n// import dayjs from \"dayjs\";\n// import './css/App.css';\n// import benzel from '../src/images/app/grafik 1.png';\n// import Vector from '../src/images/app/Vector.png';\n// import Karte from '../src/images/app/map.png';\n// import BarcodeReader from 'react-barcode-reader';\n//\n// const App: FC = () => {\n//     const [data, setData] = useState<any>(null);\n//     const [eingabe, setEingabe] = useState<string>(\"\");\n//     const [abfrage, setAbfrage] = useState<boolean>(false);\n//     const [warnung, setWarnung] = useState<boolean>(false);\n//     const [warnungText, setWarnungText] = useState<string | null>(null);\n//     // const now: dayjs.Dayjs = dayjs(); todo: exampleDate = now\n//     const exampleDate = dayjs('2023.01.01');\n//\n//     const [noData, setNoData] = useState<boolean>(false);\n//     const [uid, setUid] = useState<string>(\"\");\n//\n//     console.log(data);\n//\n//     const handleScan = async (data: string) => {\n//         if (data !== \"\") {\n//             setUid(data);\n//             setEingabe(data);\n//             await fetchData(data); // Warte auf die Datenabfrage, bevor du fortfährst\n//             setAbfrage(true);\n//         } else {\n//             alert(\"Leer nicht möglich\");\n//         }\n//     };\n//\n//     const handleError = (err: any) => {\n//         console.error(err);\n//     };\n//\n//     const normal = 10000; // 10 seconds\n//     const lang = 18000; // 18 seconds\n//\n//     const waitingSpot: Record<string, string> = {\n//         bike: \"Fahrrad\",\n//         bottle: \"Flasche\",\n//         island: \"Insel\",\n//         keys: \"Schlüssel\",\n//         kitchen: \"Küche\",\n//         mic: \"Mikro\",\n//         mobile: \"Mobile Zellen\",\n//         sofa: \"Sofa\",\n//         star: \"Stern\",\n//         sun: \"Sonne\",\n//         tent: \"Zelt\",\n//         tree: \"Baum\",\n//         turtle: \"Taube\",\n//         window: \"bitte erfragen\"\n//     };\n//\n//     const days: Record<string, string> = {\n//         Mon: \"Mo, Mon\",\n//         Tue: \"Di, Tue\",\n//         Wed: \"Mi, Wed\",\n//         Thu: \"Do, Thu\",\n//         Fri: \"Fr, Fri\",\n//         Sat: \"Sa, Sat\",\n//         Sun: \"So, Sun\"\n//     };\n//\n//     const fetchData = async (input: string) => {\n//         try {\n//             const trimmedInput = input.trim();\n//             if (trimmedInput !== \"\") {\n//                 const ausgabeResponse = await fetch(`https://supporter.kulturkosmos.de/api/self-service/shifts/${trimmedInput}`);\n//\n//                 if (!ausgabeResponse.ok) {\n//                     throw new Error('Fehler beim Abrufen der Schichtdaten');\n//                 }\n//\n//                 const jsonData = await ausgabeResponse.json();\n//                 const testResponse = await fetch('https://supporter.kulturkosmos.de/api/self-service/special-information');\n//                 const jsonTest = await testResponse.json();\n//\n//                 if (jsonTest.data && jsonTest.data.text) {\n//                     console.log(jsonTest.data.text);\n//                     setWarnung(true);\n//                     setWarnungText(jsonTest.data.text);\n//                 }\n//\n//                 if (jsonData.data === null) {\n//                     setNoData(true);\n//                 } else {\n//                     setData(jsonData);\n//                 }\n//             }\n//         } catch (error) {\n//             console.error('Fehler beim Abrufen der Daten:', error);\n//         }\n//     };\n//\n//     useEffect(() => {\n//         if (abfrage) {\n//             const timeoutDauer = warnung ? lang : normal;\n//             const timer = setTimeout(() => {\n//                 setAbfrage(false);\n//                 setWarnung(false);\n//             }, timeoutDauer);\n//\n//             return () => clearTimeout(timer);\n//         }\n//     }, [abfrage, warnung, normal, lang]);\n//\n//     useEffect(() => {\n//         if (noData) {\n//             const timer = setTimeout(() => {\n//                 setNoData(false);\n//                 setWarnung(false);\n//                 setAbfrage(false);\n//             }, 3000); // 3 seconds\n//\n//             return () => clearTimeout(timer);\n//         }\n//     }, [noData]);\n//\n//     return (\n//         <div>\n//             <div className={\"grundflaeche\"}>\n//                 <div className={!abfrage ? \"box\" : \"box boxleft\"}>\n//                     {!abfrage ? (\n//                         <>\n//                             <h2>Supporter Schichtauskunft</h2>\n//                             <h3>Supporter Shiftinformation</h3>\n//                             <h4 className={\"deutsch\"}>Bitte halte dein Bändsel unter den Scanner</h4>\n//                             <h5 className={\"englisch\"}>Please hold your wristband under the scanner</h5>\n//                             <img src={benzel} alt=\"benzel\" className=\"benzel\" />\n//                         </>\n//                     ) : (\n//                         <>\n//                             {warnung && (\n//                                 <div className={\"scroll-container\"}>\n//                                     <div className={\"warnung\"}>\n//                                         <div className={\"warnung-text\"}>{warnungText}</div>\n//                                     </div>\n//                                 </div>\n//                             )}\n//                             <h2>Supporter Schichtauskunft</h2>\n//                             <h3>Supporter Shiftinformation</h3>\n//                             {data ? (\n//                                 <>\n//                                     <h4 className={\"deutsch-ausgabe\"}>Deine Schichten</h4>\n//                                     <h5 className={\"englisch-ausgabe\"}>Your Shifts</h5>\n//                                     {data.data && data.data.length > 0 ? (\n//                                         data.data\n//                                             .filter((entry: any) => dayjs(entry.startAt).isAfter(exampleDate) || dayjs(entry.startAt).isSame(exampleDate, 'day'))\n//                                             .sort((a: any, b: any) => dayjs(a.startAt).diff(exampleDate) - dayjs(b.startAt).diff(exampleDate))\n//                                             .slice(0, 3)\n//                                             .map((entry: any, index: number) => (\n//                                                 <div className={\"ausgabeabfrage\"} key={index}>\n//                                                     <p className={\"index\"}>{index + 1}</p>\n//                                                     <p className={\"days\"}><strong>{days[dayjs(entry.startAt).format('ddd')]}</strong> // {dayjs(entry.startAt).format('DD.MM - HH:mm')}</p>\n//                                                     <p className={\"vector\"}> <img src={Vector} alt=\"Vector\" className=\"Vector\" /></p>\n//                                                     <p className={\"place\"}>{waitingSpot[entry.waitingSpot]}</p>\n//                                                     <br />\n//                                                 </div>\n//                                             ))\n//                                     ) : (\n//                                         <p></p>\n//                                     )}\n//                                 </>\n//                             ) : (\n//                                 noData && (\n//                                     <>\n//                                         <h4 className={\"deutsch-ausgabe-no\"}>Keine Informationen</h4>\n//                                         <h5 className={\"englisch-ausgabe-no\"}>No Information</h5>\n//                                     </>\n//                                 )\n//                             )}\n//                         </>\n//                     )}\n//                 </div>\n//                 <img src={Karte} alt={\"Karte\"} className={`Karte${abfrage ? ' in' : ''}`} />\n//             </div>\n//\n//             <div className={\"wip\"}>\n//                 <BarcodeReader\n//                     onError={handleError}\n//                     onScan={handleScan}\n//                 />\n//             </div>\n//         </div>\n//     );\n// };\n//\n// export default App;\n\n//todo Funktioniert gut\n\n// import React, { FC, useEffect, useState } from 'react';\n// import dayjs from \"dayjs\";\n// import './css/App.css'\n// import benzel from '../src/images/app/grafik 1.png'\n// import Vector from '../src/images/app/Vector.png'\n// import Karte from '../src/images/app/map.png'\n// import BarcodeReader from 'react-barcode-reader';\n//\n// const App: FC = () => {\n//     const [data, setData] = useState<any>(null);\n//     const [eingabe, setEingabe] = useState<string>(\"\");\n//     const [abfrage, setAbfrage] = useState<boolean>(false);\n//     const [warnung, setWarnung] = useState<boolean>(false);\n//     const [warnungText, setWarnungText] = useState<string | null>(null);\n//     // const now: dayjs.Dayjs = dayjs(); todo: exampleDate = now\n//     const exampleDate = dayjs('2023.01.01');\n//\n//     const [noData, setNoData] = useState<boolean>(false);\n//     const [uid, setUid] = useState<string>(\"\");\n//\n//     console.log(data);\n//\n//     const handleScan = async (data: string) => {\n//         if (data !== \"\") {\n//             setUid(data);\n//             setEingabe(data);\n//             await fetchData(data); // Warte auf die Datenabfrage, bevor du fortfährst\n//             setAbfrage(true);\n//         } else {\n//             alert(\"Leer nicht möglich\");\n//         }\n//     };\n//\n//     const handleError = (err: any) => {\n//         console.error(err);\n//     };\n//\n//     const normal = 10000; // 10 seconds\n//     const lang = 18000; // 18 seconds\n//\n//     const waitingSpot: Record<string, string> = {\n//         bike: \"Fahrrad\",\n//         bottle: \"Flasche\",\n//         island: \"Insel\",\n//         keys: \"Schlüssel\",\n//         kitchen: \"Küche\",\n//         mic: \"Mikro\",\n//         mobile: \"Mobile Zellen\",\n//         sofa: \"Sofa\",\n//         star: \"Stern\",\n//         sun: \"Sonne\",\n//         tent: \"Zelt\",\n//         tree: \"Baum\",\n//         turtle: \"Taube\",\n//         window: \"bitte erfragen\"\n//     };\n//\n//     const days: Record<string, string> = {\n//         Mon: \"Mo, Mon\",\n//         Tue: \"Di, Tue\",\n//         Wed: \"Mi, Wed\",\n//         Thu: \"Do, Thu\",\n//         Fri: \"Fr, Fri\",\n//         Sat: \"Sa, Sat\",\n//         Sun: \"So, Sun\"\n//     };\n//\n//     const fetchData = async (input: string) => {\n//         try {\n//             const trimmedInput = input.trim();\n//             if (trimmedInput !== \"\") {\n//                 const ausgabeResponse = await fetch(`https://supporter.kulturkosmos.de/api/self-service/shifts/${trimmedInput}`);\n//\n//                 if (!ausgabeResponse.ok) {\n//                     throw new Error('Fehler beim Abrufen der Schichtdaten');\n//                 }\n//\n//                 const jsonData = await ausgabeResponse.json();\n//                 const testResponse = await fetch('https://supporter.kulturkosmos.de/api/self-service/special-information');\n//                 const jsonTest = await testResponse.json();\n//\n//                 if (jsonTest.data && jsonTest.data.text) {\n//                     console.log(jsonTest.data.text);\n//                     setWarnung(true);\n//                     setWarnungText(jsonTest.data.text);\n//                 }\n//\n//                 if (jsonData.data === null) {\n//                     setNoData(true);\n//                 } else {\n//                     setData(jsonData);\n//                 }\n//             }\n//         } catch (error) {\n//             console.error('Fehler beim Abrufen der Daten:', error);\n//         }\n//     };\n//\n//\n//     useEffect(() => {\n//         if (abfrage) {\n//             const timeoutDauer = warnung ? lang : normal;\n//             const timer = setTimeout(() => {\n//                 setAbfrage(false);\n//                 setWarnung(false);\n//             }, timeoutDauer);\n//\n//             return () => clearTimeout(timer);\n//         }\n//     }, [abfrage, warnung, normal, lang]);\n//\n//\n//     return (\n//         <div>\n//             <div className={\"grundflaeche\"}>\n//                 <div className={!abfrage ? \"box\" : \"box boxleft\"}>\n//                     {!abfrage ? (\n//                         <>\n//                             <h2>Supporter Schichtauskunft</h2>\n//                             <h3>Supporter Shiftinformation</h3>\n//                             <h4 className={\"deutsch\"}>Bitte halte dein Bändsel unter den Scanner</h4>\n//                             <h5 className={\"englisch\"}>Please hold your wristband under the scanner</h5>\n//                             <img src={benzel} alt=\"benzel\" className=\"benzel\" />\n//                         </>\n//                     ) : (\n//\n//                         <>\n//                             {warnung && (\n//                                 <div className={\"scroll-container\"}>\n//                                     <div className={\"warnung\"}>\n//                                         <div className={\"warnung-text\"}>{warnungText}</div>\n//                                     </div>\n//                                 </div>\n//                             )}\n//                             <h2>Supporter Schichtauskunft</h2>\n//                             <h3>Supporter Shiftinformation</h3>\n//                             {data ? (\n//                                 <>\n//                                     <h4 className={\"deutsch-ausgabe\"}>Deine Schichten</h4>\n//                                     <h5 className={\"englisch-ausgabe\"}>Your Shifts</h5>\n//                                     {data.data && data.data.length > 0 ? (\n//                                         data.data\n//                                             .filter((entry: any) => dayjs(entry.startAt).isAfter(exampleDate) || dayjs(entry.startAt).isSame(exampleDate, 'day'))\n//                                             .sort((a: any, b: any) => dayjs(a.startAt).diff(exampleDate) - dayjs(b.startAt).diff(exampleDate))\n//                                             .slice(0, 3)\n//                                             .map((entry: any, index: number) => (\n//                                                 <div className={\"ausgabeabfrage\"} key={index}>\n//                                                     <p className={\"index\"}>{index + 1}</p>\n//                                                     <p className={\"days\"}><strong>{days[dayjs(entry.startAt).format('ddd')]}</strong> // {dayjs(entry.startAt).format('DD.MM - HH:mm')}</p>\n//                                                     <p className={\"vector\"}> <img src={Vector} alt=\"Vector\" className=\"Vector\" /></p>\n//                                                     <p className={\"place\"}>{waitingSpot[entry.waitingSpot]}</p>\n//                                                     <br />\n//                                                 </div>\n//                                             ))\n//                                     ) : (\n//                                         <p></p>\n//                                     )}\n//                                 </>\n//                             ) : (\n//                                 // Dieser teill soll wenn angezeigt wird nach 3 sekunden wieder verschwinden\n//                                 <>\n//                                     <h4 className={\"deutsch-ausgabe-no\"}>Keine Informationen</h4>\n//                                     <h5 className={\"englisch-ausgabe-no\"}>No Information</h5>\n//                                 </>\n//                             )}\n//                         </>\n//\n//\n//                     )}\n//                 </div>\n//                 <img src={Karte} alt={\"Karte\"} className={`Karte${abfrage ? ' in' : ''}`} />\n//             </div>\n//\n//             <div className={\"wip\"}>\n//                 <BarcodeReader\n//                     onError={handleError}\n//                     onScan={handleScan}\n//                 />\n//             </div>\n//         </div>\n//\n// );\n// };\n//\n// export default App;\n\n//todo Alt -> noch mal vergleichen, dann Löschen!\n\n// import React, { FC, useEffect, useState} from 'react';\n// import dayjs from \"dayjs\";\n// import './css/App.css'\n// import benzel from \"../src/images/app/grafik 1.png\"\n// import Vector from '../src/images/app/Vector.png'\n// import Karte from '../src/images/app/map.png'\n// import BarcodeReader from 'react-barcode-reader';\n//\n// const App: FC = () => {\n//     // Daten und Eingabe werden deklariert\n//     const [data, setData] = useState<any>(null);\n//     const [eingabe, setEingabe] = useState<string>(\"\");\n//     const [abfrage, setAbfrage] = useState<boolean>(false);\n//     const [warnung, setWarnung] = useState<boolean>(false);\n//     const [warnungText, setWarnungText] = useState<any>(null);\n//     const now: dayjs.Dayjs = dayjs();\n//     const exampleDate = dayjs('2023.01.01'); //todo: exampleDate muss durch now ersetzt werden\n//\n//     // console.log(data);\n//     console.log(warnungText);\n//\n//     //todo: weiter mit fetchData siehe Auskommentierter code\n//     const [noData, setNoData] = useState<boolean>();\n//     console.log(noData);\n//\n//     const [uid, setUid] = useState<string>(\"\");\n//     console.log(uid);\n//\n//     //Verarbeitung der eingabe des NFC-Scanners\n//     const handleScan = async (data: any) => {\n//         if (data !== \"\") {\n//             setUid(data);\n//             setEingabe(data);\n//             await fetchData(); // Warte auf die Datenabfrage, bevor du fortfährst\n//             setAbfrage(true);\n//         } else {\n//             alert(\"Leer nicht möglich\");\n//         }\n//     }\n//     const handleError = (err: any) => {\n//         console.error(err);\n//     }\n//\n//\n//     //Zeit nach der die Ausgabe beendet wird\n//     const normal = 10000; // 10 seconds\n//     const lang = 18000; // 18 seconds\n//\n//\n//     // Array mit Übersetzungen zu den Treffpunkten wird deklariert\n//     const waitingSpot: Record<string, string> = {\n//         bike: \"Fahrrad\",\n//         bottle: \"Flasche\",\n//         island: \"Insel\",\n//         keys: \"Schlüssel\",\n//         kitchen: \"Küche\",\n//         mic: \"Mikro\",\n//         mobile: \"Mobile Zellen\",\n//         sofa: \"Sofa\",\n//         star: \"Stern\",\n//         sun: \"Sonne\",\n//         tent: \"Zelt\",\n//         tree: \"Baum\",\n//         turtle: \"Taube\",\n//         window: \"bitte erfragen\"\n//     }\n//\n//     const days: Record<string, string> = {\n//         Mon: \"Mo, Mon\",\n//         Tue: \"Di, Tue\",\n//         Wed: \"Mi, Wed\",\n//         Thu: \"Do, Thue\",\n//         Fri: \"Fr, Fri\",\n//         Sat: \"Sa, Sat\",\n//         Sun: \"So, Sun\"\n//     }\n//\n//\n//     // const fetchData = async () => {\n//     //     try {\n//     //         if (eingabe.trim() !== \"\") { // Überprüfung, ob Eingabe leer ist\n//     //             const ausgabe = await fetch(`https://supporter.kulturkosmos.de/api/self-service/shifts/${eingabe}`);\n//     //             if (!ausgabe.ok) {\n//     //                 throw new Error('Fehler');\n//     //             }\n//     //             const jsonData = await ausgabe.json();\n//     //             const test = await fetch('https://supporter.kulturkosmos.de/api/self-service/special-information');\n//     //             const jsonTest = await test.json()\n//     //             if(jsonTest.data.text !== null){\n//     //                 setWarnung(true);\n//     //                 setWarnungText(jsonTest.data.text)\n//     //             }\n//     //             console.log(jsonTest.data.text);\n//     //\n//     //             //todo: Der Block hier ist nur zum testen\n//     //\n//     //             // console.log(jsonData.data);\n//     //             // console.log(jsonData.data === null); //todo: Hier weiter!!!!!\n//     //             if(jsonData.data === null){\n//     //                 // console.log(\"Keine Daten\");\n//     //                 setNoData(false);\n//     //                 // console.log(\"Keine Daten:\" + noData);\n//     //             } else {\n//     //                 // console.log(\"Hier sind die Daten:\" + jsonData.data);\n//     //                 setData(true);\n//     //                 // console.log(\"Hier gibt es Daten\" + noData)\n//     //             }\n//     //             setData(jsonData);\n//     //         }\n//     //     } catch (error) {\n//     //         console.error('Error fetching data:', error);\n//     //     }\n//     // };\n//\n//\n//\n//     const fetchData = async () => {\n//         try {\n//             const trimmedInput = eingabe.trim();\n//             if (trimmedInput !== \"\") {\n//                 const ausgabeResponse = await fetch(`https://supporter.kulturkosmos.de/api/self-service/shifts/${trimmedInput}`);\n//\n//                 if (!ausgabeResponse.ok) {\n//                     throw new Error('Fehler beim Abrufen der Schichtdaten');\n//                 }\n//\n//                 const jsonData = await ausgabeResponse.json();\n//                 const testResponse = await fetch('https://supporter.kulturkosmos.de/api/self-service/special-information');\n//                 const jsonTest = await testResponse.json();\n//\n//                 if (jsonTest.data.text) {\n//                     setWarnung(true);\n//                     setWarnungText(jsonTest.data.text);\n//                 }\n//\n//                 console.log(jsonTest.data.text !== null);\n//\n//                 if (jsonData.data === null) {\n//                     setNoData(true);\n//                 } else {\n//                     setData(jsonData);\n//                 }\n//             }\n//         } catch (error) {\n//             console.error('Fehler beim Abrufen der Daten:', error);\n//         }\n//     };\n//\n//\n//\n//\n//\n//     const handleClick = () => {\n//         if(eingabe !== \"\"){\n//             fetchData();\n//             setAbfrage(true);\n//         }else {\n//             alert(\"Leer nicht möglich\")\n//         }\n//\n//     };\n//\n//     // Neu laden der Seite todo: Aktivieren wenn fertig :D ÄNDERN\n//     useEffect(() => {\n//         if (!data || data.data === null) {\n//             // console.log(\"Kein Ergebnis bei der Abfrage\");\n//             const timer = setTimeout(() => {\n//                 setAbfrage(false);\n//             }, 1000); // Timeout von 1 Sekunde\n//             return () => clearTimeout(timer);\n//         }\n//\n//         const timeoutDauer = abfrage && !warnung ? normal : lang;\n//         const timer = setTimeout(() => {\n//             setAbfrage(false);\n//         }, timeoutDauer);\n//\n//         return () => clearTimeout(timer);\n//     }, [abfrage, data, warnung, normal, lang]);\n\n// useEffect(() => {\n//     if (abfrage) {\n//         const timeoutDauer = warnung ? lang : normal;\n//         const timer = setTimeout(() => {\n//             setAbfrage(false);\n//             setWarnung(false);\n//         }, timeoutDauer);\n//\n//         return () => clearTimeout(timer);\n//     }\n// }, [abfrage, warnung, normal, lang]);\n\n//\n//     return (\n//         <div>\n//             <div className={\"grundflaeche\"}>\n//                 <div className={!abfrage ? \"box\" : \"box boxleft\"}>\n//                     {!abfrage ? (\n//                         <>\n//                             <h2>Supporter Schichtauskunft</h2>\n//                             <h3>Supporter Shiftinformation</h3>\n//                             <h4 className={\"deutsch\"}>Bitte halte dein Bändsel unter den Scanner</h4>\n//                             <h5 className={\"englisch\"}>Please hold your wristband under the scanner</h5>\n//                             <img src={benzel} alt=\"benzel\" className=\"benzel\" />\n//                         </>\n//                     ) :  (\n//                         <>\n//                             {warnung && (\n//                                 <div className={\"scroll-container\"}>\n//                                     <div className={\"warnung\"}>\n//                                         <div className={\"warnung-text\"}>{warnungText}</div>\n//                                     </div>\n//                                 </div>\n//                             )}\n//                             <h2>Supporter Schichtauskunft</h2>\n//                             <h3>Supporter Shiftinformation</h3>\n//                             <h4 className={\"deutsch-ausgabe\"}>Deine Schichten</h4>\n//                             <h5 className={\"englisch-ausgabe\"}>Your Shifts</h5>\n//\n//                             {/* Sortierung nur, wenn Daten vorhanden sind */}\n//                             {data && data.data && data.data.length > 0 && (\n//                                 <>\n//                                     {data.data\n//                                         //Filtern nach Datum\n//                                         .filter((entry: any) => dayjs(entry.startAt).isAfter(exampleDate) || dayjs(entry.startAt).isSame(exampleDate, 'day'))\n//                                         //Sortieren\n//                                         .sort((a: any, b: any) => dayjs(a.startAt).diff(exampleDate) - dayjs(b.startAt).diff(exampleDate))\n//                                         // Ausgabe von index 0 dann die ersten 3 -> 0, 1, 2\n//                                         .slice(0, 3)\n//\n//                                         .map((entry: any, index: number) => (\n//                                             <div className={\"ausgabeabfrage\"} key={index}>\n//                                                 <p className={\"index\"}>{index + 1}</p>\n//                                                 {/*Anzeige des Wochentags und des Datums im gewünschten Format*/}\n//                                                 <p className={\"days\"}><strong>{days[dayjs(entry.startAt).format('ddd')]}</strong> // {dayjs(entry.startAt).format('DD.MM - HH:mm')}</p>\n//                                                 {/*Anzeigen des Vectors*/}\n//                                                 <p className={\"vector\"}> <img src={Vector} alt=\"Vector\" className=\"Vector\" /></p>\n//                                                 {/*Anzeige des Wartebereichs*/}\n//                                                 <p className={\"place\"}>{waitingSpot[entry.waitingSpot]}</p>\n//                                                 <br />\n//                                             </div>\n//                                         ))\n//                                     }\n//                                 </>\n//                             )}\n//                         </>\n//\n//                     )}\n//                 </div>\n//                 <img src={Karte} alt={\"Karte\"} className={`Karte${abfrage ? ' in' : ''}`}  />\n//             </div>\n//\n//             <div className={\"wip\"}>\n//                 {/*<input*/}\n//                 {/*    type=\"text\"*/}\n//                 {/*    placeholder=\"ID\"*/}\n//                 {/*    value={eingabe}*/}\n//                 {/*    onChange={(e) => setEingabe(e.target.value)}*/}\n//                 {/*/>*/}\n//                 {/*<button onClick={handleClick}>Abfragen</button>*/}\n//                 {/*<button onClick={() => window.location.reload()}>Reset</button>*/}\n//                 {/*<button onClick={() => setEingabe(\"0492131A757780\")}>0492131A757780</button>*/}\n//                 {/*<button onClick={() => setEingabe(\"04ABE51A757780\")}>04ABE51A757780</button>*/}\n//                 {/*<button onClick={() => setEingabe(\"048DCC1A757780\")}>048DCC1A757780</button>*/}\n//                 {/*<button onClick={() => setEingabe(\"04E0FD1A757780\")} style={{ backgroundColor: 'green' }}>04E0FD1A757780</button>*/}\n//                 {/*<button onClick={() => setEingabe(\"049E0D1A757784\")}>049E0D1A757784</button>*/}\n//                 {/*<button onClick={() => setEingabe(\"0433541A757780\")}>0433541A757780</button>*/}\n//                 {/*<button onClick={() => setEingabe(\"04BB2B6ABE6F80\")}>04BB2B6ABE6F80</button>*/}\n//                 {/*<button onClick={() => setEingabe(\"04E0dwedefregfrfgrfgFD1A757780\")} style={{ backgroundColor: 'red' }}>04E0FD1A757780</button>*/}\n//\n//                 {/*<button onClick={() => setWarnung(true)}>Warnung An</button>*/}\n//                 {/*<button onClick={() => setWarnung(false)}>Warnung Aus</button>*/}\n//\n//\n//\n//                 <BarcodeReader\n//                     onError={handleError}\n//                     onScan={handleScan}\n//                 />\n//                 {/*{uid && <p>Barcode detected: {uid}</p>}*/}\n//             </div>\n//         </div>\n//     );\n// };\n//\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","dayjs","BarcodeReader","fetchShiftData","fetchSpecialInformation","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","data","setData","abfrage","setAbfrage","warnung","setWarnung","warnungText","setWarnungText","noData","setNoData","uid","setUid","exampleDate","waitingSpot","bike","bottle","days","Mon","handleScan","fetchData","alert","handleError","err","console","error","input","trimmedInput","trim","ausgabeResponse","ok","Error","jsonData","json","testResponse","jsonTest","text","timeoutDauer","timer","setTimeout","clearTimeout","children","className","fileName","_jsxFileName","lineNumber","columnNumber","length","filter","entry","startAt","isAfter","isSame","sort","a","b","diff","slice","map","index","format","src","alt","onError","onScan","_c","$RefreshReg$"],"sources":["C:/Users/woof/Documents/AbschlussProjekt/abfrage-api-supporter/src/App.tsx"],"sourcesContent":["// App.tsx\r\n\r\nimport React, { FC, useEffect, useState } from 'react';\r\nimport dayjs from \"dayjs\";\r\nimport './css/App.css';\r\nimport BarcodeReader from 'react-barcode-reader';\r\nimport { fetchShiftData, fetchSpecialInformation } from './api';\r\n\r\ninterface Shift {\r\n    startAt: string;\r\n    waitingSpot: string;\r\n}\r\n\r\nconst App: FC = () => {\r\n    const [data, setData] = useState<Shift[] | null>(null);\r\n    const [abfrage, setAbfrage] = useState<boolean>(false);\r\n    const [warnung, setWarnung] = useState<boolean>(false);\r\n    const [warnungText, setWarnungText] = useState<string | null>(null);\r\n    const [noData, setNoData] = useState<boolean>(false);\r\n    const [uid, setUid] = useState<string>(\"\");\r\n\r\n    const exampleDate = dayjs('2023-01-01');\r\n\r\n    const waitingSpot: Record<string, string> = {\r\n        bike: \"Fahrrad\",\r\n        bottle: \"Flasche\",\r\n        // andere Einträge...\r\n    };\r\n\r\n    const days: Record<string, string> = {\r\n        Mon: \"Mo, Mon\",\r\n        // andere Einträge...\r\n    };\r\n\r\n    const handleScan = async (data: string) => {\r\n        if (data !== \"\") {\r\n            setUid(data);\r\n            await fetchData(data);\r\n            setAbfrage(true);\r\n        } else {\r\n            alert(\"Leer nicht möglich\");\r\n        }\r\n    };\r\n\r\n    const handleError = (err: any) => {\r\n        console.error(err);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchData = async (input: string) => {\r\n            try {\r\n                const trimmedInput = input.trim();\r\n                if (trimmedInput !== \"\") {\r\n                    const ausgabeResponse = await fetchShiftData(trimmedInput);\r\n\r\n                    if (!ausgabeResponse.ok) {\r\n                        throw new Error('Fehler beim Abrufen der Schichtdaten');\r\n                    }\r\n\r\n                    const jsonData = await ausgabeResponse.json();\r\n                    const testResponse = await fetchSpecialInformation();\r\n\r\n                    if (testResponse.ok) {\r\n                        const jsonTest = await testResponse.json();\r\n                        if (jsonTest.data && jsonTest.data.text) {\r\n                            setWarnung(true);\r\n                            setWarnungText(jsonTest.data.text);\r\n                        }\r\n                    }\r\n\r\n                    if (jsonData.data === null) {\r\n                        setNoData(true);\r\n                    } else {\r\n                        setData(jsonData);\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                console.error('Fehler beim Abrufen der Daten:', error);\r\n            }\r\n        };\r\n\r\n        if (abfrage) {\r\n            const timeoutDauer = warnung ? 18000 : 10000;\r\n            const timer = setTimeout(() => {\r\n                setAbfrage(false);\r\n                setWarnung(false);\r\n            }, timeoutDauer);\r\n\r\n            return () => clearTimeout(timer);\r\n        }\r\n    }, [abfrage, warnung]);\r\n\r\n    useEffect(() => {\r\n        if (noData) {\r\n            const timer = setTimeout(() => {\r\n                setNoData(false);\r\n                setWarnung(false);\r\n                setAbfrage(false);\r\n            }, 3000);\r\n\r\n            return () => clearTimeout(timer);\r\n        }\r\n    }, [noData]);\r\n\r\n    return (\r\n        <div>\r\n            <div className={\"grundflaeche\"}>\r\n                <div className={!abfrage ? \"box\" : \"box boxleft\"}>\r\n                    {!abfrage ? (\r\n                        <>\r\n                            <h2>Supporter Schichtauskunft</h2>\r\n                            <h3>Supporter Shiftinformation</h3>\r\n                            <h4 className={\"deutsch\"}>Bitte halte dein Bändsel unter den Scanner</h4>\r\n                            <h5 className={\"englisch\"}>Please hold your wristband under the scanner</h5>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            {warnung && (\r\n                                <div className={\"scroll-container\"}>\r\n                                    <div className={\"warnung\"}>\r\n                                        <div className={\"warnung-text\"}>{warnungText}</div>\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                            <h2>Supporter Schichtauskunft</h2>\r\n                            <h3>Supporter Shiftinformation</h3>\r\n                            {data ? (\r\n                                <>\r\n                                    <h4 className={\"deutsch-ausgabe\"}>Deine Schichten</h4>\r\n                                    <h5 className={\"englisch-ausgabe\"}>Your Shifts</h5>\r\n                                    {data.length > 0 ? (\r\n                                        data\r\n                                            .filter(entry => dayjs(entry.startAt).isAfter(exampleDate) || dayjs(entry.startAt).isSame(exampleDate, 'day'))\r\n                                            .sort((a, b) => dayjs(a.startAt).diff(exampleDate) - dayjs(b.startAt).diff(exampleDate))\r\n                                            .slice(0, 3)\r\n                                            .map((entry, index) => (\r\n                                                <div className={\"ausgabeabfrage\"} key={index}>\r\n                                                    <p className={\"index\"}>{index + 1}</p>\r\n                                                    <p className={\"days\"}><strong>{days[dayjs(entry.startAt).format('ddd')]}</strong> // {dayjs(entry.startAt).format('DD.MM - HH:mm')}</p>\r\n                                                    <p className={\"place\"}>{waitingSpot[entry.waitingSpot]}</p>\r\n                                                    <br />\r\n                                                </div>\r\n                                            ))\r\n                                    ) : (\r\n                                        <p></p>\r\n                                    )}\r\n                                </>\r\n                            ) : (\r\n                                noData && (\r\n                                    <>\r\n                                        <h4 className={\"deutsch-ausgabe-no\"}>Keine Informationen</h4>\r\n                                        <h5 className={\"englisch-ausgabe-no\"}>No Information</h5>\r\n                                    </>\r\n                                )\r\n                            )}\r\n                        </>\r\n                    )}\r\n                </div>\r\n                {/* Annahme: Karte ist ein statisches Bild */}\r\n                <img src=\"Karte.jpg\" alt={\"Karte\"} className={`Karte${abfrage ? ' in' : ''}`} />\r\n            </div>\r\n\r\n            <div className={\"wip\"}>\r\n                <BarcodeReader\r\n                    onError={handleError}\r\n                    onScan={handleScan}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { FC, useEffect, useState } from 'react';\r\n// import dayjs from \"dayjs\";\r\n// import './css/App.css';\r\n// import benzel from '../src/images/app/grafik 1.png';\r\n// import Vector from '../src/images/app/Vector.png';\r\n// import Karte from '../src/images/app/map.png';\r\n// import BarcodeReader from 'react-barcode-reader';\r\n//\r\n// const App: FC = () => {\r\n//     const [data, setData] = useState<any>(null);\r\n//     const [eingabe, setEingabe] = useState<string>(\"\");\r\n//     const [abfrage, setAbfrage] = useState<boolean>(false);\r\n//     const [warnung, setWarnung] = useState<boolean>(false);\r\n//     const [warnungText, setWarnungText] = useState<string | null>(null);\r\n//     // const now: dayjs.Dayjs = dayjs(); todo: exampleDate = now\r\n//     const exampleDate = dayjs('2023.01.01');\r\n//\r\n//     const [noData, setNoData] = useState<boolean>(false);\r\n//     const [uid, setUid] = useState<string>(\"\");\r\n//\r\n//     console.log(data);\r\n//\r\n//     const handleScan = async (data: string) => {\r\n//         if (data !== \"\") {\r\n//             setUid(data);\r\n//             setEingabe(data);\r\n//             await fetchData(data); // Warte auf die Datenabfrage, bevor du fortfährst\r\n//             setAbfrage(true);\r\n//         } else {\r\n//             alert(\"Leer nicht möglich\");\r\n//         }\r\n//     };\r\n//\r\n//     const handleError = (err: any) => {\r\n//         console.error(err);\r\n//     };\r\n//\r\n//     const normal = 10000; // 10 seconds\r\n//     const lang = 18000; // 18 seconds\r\n//\r\n//     const waitingSpot: Record<string, string> = {\r\n//         bike: \"Fahrrad\",\r\n//         bottle: \"Flasche\",\r\n//         island: \"Insel\",\r\n//         keys: \"Schlüssel\",\r\n//         kitchen: \"Küche\",\r\n//         mic: \"Mikro\",\r\n//         mobile: \"Mobile Zellen\",\r\n//         sofa: \"Sofa\",\r\n//         star: \"Stern\",\r\n//         sun: \"Sonne\",\r\n//         tent: \"Zelt\",\r\n//         tree: \"Baum\",\r\n//         turtle: \"Taube\",\r\n//         window: \"bitte erfragen\"\r\n//     };\r\n//\r\n//     const days: Record<string, string> = {\r\n//         Mon: \"Mo, Mon\",\r\n//         Tue: \"Di, Tue\",\r\n//         Wed: \"Mi, Wed\",\r\n//         Thu: \"Do, Thu\",\r\n//         Fri: \"Fr, Fri\",\r\n//         Sat: \"Sa, Sat\",\r\n//         Sun: \"So, Sun\"\r\n//     };\r\n//\r\n//     const fetchData = async (input: string) => {\r\n//         try {\r\n//             const trimmedInput = input.trim();\r\n//             if (trimmedInput !== \"\") {\r\n//                 const ausgabeResponse = await fetch(`https://supporter.kulturkosmos.de/api/self-service/shifts/${trimmedInput}`);\r\n//\r\n//                 if (!ausgabeResponse.ok) {\r\n//                     throw new Error('Fehler beim Abrufen der Schichtdaten');\r\n//                 }\r\n//\r\n//                 const jsonData = await ausgabeResponse.json();\r\n//                 const testResponse = await fetch('https://supporter.kulturkosmos.de/api/self-service/special-information');\r\n//                 const jsonTest = await testResponse.json();\r\n//\r\n//                 if (jsonTest.data && jsonTest.data.text) {\r\n//                     console.log(jsonTest.data.text);\r\n//                     setWarnung(true);\r\n//                     setWarnungText(jsonTest.data.text);\r\n//                 }\r\n//\r\n//                 if (jsonData.data === null) {\r\n//                     setNoData(true);\r\n//                 } else {\r\n//                     setData(jsonData);\r\n//                 }\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Fehler beim Abrufen der Daten:', error);\r\n//         }\r\n//     };\r\n//\r\n//     useEffect(() => {\r\n//         if (abfrage) {\r\n//             const timeoutDauer = warnung ? lang : normal;\r\n//             const timer = setTimeout(() => {\r\n//                 setAbfrage(false);\r\n//                 setWarnung(false);\r\n//             }, timeoutDauer);\r\n//\r\n//             return () => clearTimeout(timer);\r\n//         }\r\n//     }, [abfrage, warnung, normal, lang]);\r\n//\r\n//     useEffect(() => {\r\n//         if (noData) {\r\n//             const timer = setTimeout(() => {\r\n//                 setNoData(false);\r\n//                 setWarnung(false);\r\n//                 setAbfrage(false);\r\n//             }, 3000); // 3 seconds\r\n//\r\n//             return () => clearTimeout(timer);\r\n//         }\r\n//     }, [noData]);\r\n//\r\n//     return (\r\n//         <div>\r\n//             <div className={\"grundflaeche\"}>\r\n//                 <div className={!abfrage ? \"box\" : \"box boxleft\"}>\r\n//                     {!abfrage ? (\r\n//                         <>\r\n//                             <h2>Supporter Schichtauskunft</h2>\r\n//                             <h3>Supporter Shiftinformation</h3>\r\n//                             <h4 className={\"deutsch\"}>Bitte halte dein Bändsel unter den Scanner</h4>\r\n//                             <h5 className={\"englisch\"}>Please hold your wristband under the scanner</h5>\r\n//                             <img src={benzel} alt=\"benzel\" className=\"benzel\" />\r\n//                         </>\r\n//                     ) : (\r\n//                         <>\r\n//                             {warnung && (\r\n//                                 <div className={\"scroll-container\"}>\r\n//                                     <div className={\"warnung\"}>\r\n//                                         <div className={\"warnung-text\"}>{warnungText}</div>\r\n//                                     </div>\r\n//                                 </div>\r\n//                             )}\r\n//                             <h2>Supporter Schichtauskunft</h2>\r\n//                             <h3>Supporter Shiftinformation</h3>\r\n//                             {data ? (\r\n//                                 <>\r\n//                                     <h4 className={\"deutsch-ausgabe\"}>Deine Schichten</h4>\r\n//                                     <h5 className={\"englisch-ausgabe\"}>Your Shifts</h5>\r\n//                                     {data.data && data.data.length > 0 ? (\r\n//                                         data.data\r\n//                                             .filter((entry: any) => dayjs(entry.startAt).isAfter(exampleDate) || dayjs(entry.startAt).isSame(exampleDate, 'day'))\r\n//                                             .sort((a: any, b: any) => dayjs(a.startAt).diff(exampleDate) - dayjs(b.startAt).diff(exampleDate))\r\n//                                             .slice(0, 3)\r\n//                                             .map((entry: any, index: number) => (\r\n//                                                 <div className={\"ausgabeabfrage\"} key={index}>\r\n//                                                     <p className={\"index\"}>{index + 1}</p>\r\n//                                                     <p className={\"days\"}><strong>{days[dayjs(entry.startAt).format('ddd')]}</strong> // {dayjs(entry.startAt).format('DD.MM - HH:mm')}</p>\r\n//                                                     <p className={\"vector\"}> <img src={Vector} alt=\"Vector\" className=\"Vector\" /></p>\r\n//                                                     <p className={\"place\"}>{waitingSpot[entry.waitingSpot]}</p>\r\n//                                                     <br />\r\n//                                                 </div>\r\n//                                             ))\r\n//                                     ) : (\r\n//                                         <p></p>\r\n//                                     )}\r\n//                                 </>\r\n//                             ) : (\r\n//                                 noData && (\r\n//                                     <>\r\n//                                         <h4 className={\"deutsch-ausgabe-no\"}>Keine Informationen</h4>\r\n//                                         <h5 className={\"englisch-ausgabe-no\"}>No Information</h5>\r\n//                                     </>\r\n//                                 )\r\n//                             )}\r\n//                         </>\r\n//                     )}\r\n//                 </div>\r\n//                 <img src={Karte} alt={\"Karte\"} className={`Karte${abfrage ? ' in' : ''}`} />\r\n//             </div>\r\n//\r\n//             <div className={\"wip\"}>\r\n//                 <BarcodeReader\r\n//                     onError={handleError}\r\n//                     onScan={handleScan}\r\n//                 />\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n//\r\n// export default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//todo Funktioniert gut\r\n\r\n\r\n// import React, { FC, useEffect, useState } from 'react';\r\n// import dayjs from \"dayjs\";\r\n// import './css/App.css'\r\n// import benzel from '../src/images/app/grafik 1.png'\r\n// import Vector from '../src/images/app/Vector.png'\r\n// import Karte from '../src/images/app/map.png'\r\n// import BarcodeReader from 'react-barcode-reader';\r\n//\r\n// const App: FC = () => {\r\n//     const [data, setData] = useState<any>(null);\r\n//     const [eingabe, setEingabe] = useState<string>(\"\");\r\n//     const [abfrage, setAbfrage] = useState<boolean>(false);\r\n//     const [warnung, setWarnung] = useState<boolean>(false);\r\n//     const [warnungText, setWarnungText] = useState<string | null>(null);\r\n//     // const now: dayjs.Dayjs = dayjs(); todo: exampleDate = now\r\n//     const exampleDate = dayjs('2023.01.01');\r\n//\r\n//     const [noData, setNoData] = useState<boolean>(false);\r\n//     const [uid, setUid] = useState<string>(\"\");\r\n//\r\n//     console.log(data);\r\n//\r\n//     const handleScan = async (data: string) => {\r\n//         if (data !== \"\") {\r\n//             setUid(data);\r\n//             setEingabe(data);\r\n//             await fetchData(data); // Warte auf die Datenabfrage, bevor du fortfährst\r\n//             setAbfrage(true);\r\n//         } else {\r\n//             alert(\"Leer nicht möglich\");\r\n//         }\r\n//     };\r\n//\r\n//     const handleError = (err: any) => {\r\n//         console.error(err);\r\n//     };\r\n//\r\n//     const normal = 10000; // 10 seconds\r\n//     const lang = 18000; // 18 seconds\r\n//\r\n//     const waitingSpot: Record<string, string> = {\r\n//         bike: \"Fahrrad\",\r\n//         bottle: \"Flasche\",\r\n//         island: \"Insel\",\r\n//         keys: \"Schlüssel\",\r\n//         kitchen: \"Küche\",\r\n//         mic: \"Mikro\",\r\n//         mobile: \"Mobile Zellen\",\r\n//         sofa: \"Sofa\",\r\n//         star: \"Stern\",\r\n//         sun: \"Sonne\",\r\n//         tent: \"Zelt\",\r\n//         tree: \"Baum\",\r\n//         turtle: \"Taube\",\r\n//         window: \"bitte erfragen\"\r\n//     };\r\n//\r\n//     const days: Record<string, string> = {\r\n//         Mon: \"Mo, Mon\",\r\n//         Tue: \"Di, Tue\",\r\n//         Wed: \"Mi, Wed\",\r\n//         Thu: \"Do, Thu\",\r\n//         Fri: \"Fr, Fri\",\r\n//         Sat: \"Sa, Sat\",\r\n//         Sun: \"So, Sun\"\r\n//     };\r\n//\r\n//     const fetchData = async (input: string) => {\r\n//         try {\r\n//             const trimmedInput = input.trim();\r\n//             if (trimmedInput !== \"\") {\r\n//                 const ausgabeResponse = await fetch(`https://supporter.kulturkosmos.de/api/self-service/shifts/${trimmedInput}`);\r\n//\r\n//                 if (!ausgabeResponse.ok) {\r\n//                     throw new Error('Fehler beim Abrufen der Schichtdaten');\r\n//                 }\r\n//\r\n//                 const jsonData = await ausgabeResponse.json();\r\n//                 const testResponse = await fetch('https://supporter.kulturkosmos.de/api/self-service/special-information');\r\n//                 const jsonTest = await testResponse.json();\r\n//\r\n//                 if (jsonTest.data && jsonTest.data.text) {\r\n//                     console.log(jsonTest.data.text);\r\n//                     setWarnung(true);\r\n//                     setWarnungText(jsonTest.data.text);\r\n//                 }\r\n//\r\n//                 if (jsonData.data === null) {\r\n//                     setNoData(true);\r\n//                 } else {\r\n//                     setData(jsonData);\r\n//                 }\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Fehler beim Abrufen der Daten:', error);\r\n//         }\r\n//     };\r\n//\r\n//\r\n//     useEffect(() => {\r\n//         if (abfrage) {\r\n//             const timeoutDauer = warnung ? lang : normal;\r\n//             const timer = setTimeout(() => {\r\n//                 setAbfrage(false);\r\n//                 setWarnung(false);\r\n//             }, timeoutDauer);\r\n//\r\n//             return () => clearTimeout(timer);\r\n//         }\r\n//     }, [abfrage, warnung, normal, lang]);\r\n//\r\n//\r\n//     return (\r\n//         <div>\r\n//             <div className={\"grundflaeche\"}>\r\n//                 <div className={!abfrage ? \"box\" : \"box boxleft\"}>\r\n//                     {!abfrage ? (\r\n//                         <>\r\n//                             <h2>Supporter Schichtauskunft</h2>\r\n//                             <h3>Supporter Shiftinformation</h3>\r\n//                             <h4 className={\"deutsch\"}>Bitte halte dein Bändsel unter den Scanner</h4>\r\n//                             <h5 className={\"englisch\"}>Please hold your wristband under the scanner</h5>\r\n//                             <img src={benzel} alt=\"benzel\" className=\"benzel\" />\r\n//                         </>\r\n//                     ) : (\r\n//\r\n//                         <>\r\n//                             {warnung && (\r\n//                                 <div className={\"scroll-container\"}>\r\n//                                     <div className={\"warnung\"}>\r\n//                                         <div className={\"warnung-text\"}>{warnungText}</div>\r\n//                                     </div>\r\n//                                 </div>\r\n//                             )}\r\n//                             <h2>Supporter Schichtauskunft</h2>\r\n//                             <h3>Supporter Shiftinformation</h3>\r\n//                             {data ? (\r\n//                                 <>\r\n//                                     <h4 className={\"deutsch-ausgabe\"}>Deine Schichten</h4>\r\n//                                     <h5 className={\"englisch-ausgabe\"}>Your Shifts</h5>\r\n//                                     {data.data && data.data.length > 0 ? (\r\n//                                         data.data\r\n//                                             .filter((entry: any) => dayjs(entry.startAt).isAfter(exampleDate) || dayjs(entry.startAt).isSame(exampleDate, 'day'))\r\n//                                             .sort((a: any, b: any) => dayjs(a.startAt).diff(exampleDate) - dayjs(b.startAt).diff(exampleDate))\r\n//                                             .slice(0, 3)\r\n//                                             .map((entry: any, index: number) => (\r\n//                                                 <div className={\"ausgabeabfrage\"} key={index}>\r\n//                                                     <p className={\"index\"}>{index + 1}</p>\r\n//                                                     <p className={\"days\"}><strong>{days[dayjs(entry.startAt).format('ddd')]}</strong> // {dayjs(entry.startAt).format('DD.MM - HH:mm')}</p>\r\n//                                                     <p className={\"vector\"}> <img src={Vector} alt=\"Vector\" className=\"Vector\" /></p>\r\n//                                                     <p className={\"place\"}>{waitingSpot[entry.waitingSpot]}</p>\r\n//                                                     <br />\r\n//                                                 </div>\r\n//                                             ))\r\n//                                     ) : (\r\n//                                         <p></p>\r\n//                                     )}\r\n//                                 </>\r\n//                             ) : (\r\n//                                 // Dieser teill soll wenn angezeigt wird nach 3 sekunden wieder verschwinden\r\n//                                 <>\r\n//                                     <h4 className={\"deutsch-ausgabe-no\"}>Keine Informationen</h4>\r\n//                                     <h5 className={\"englisch-ausgabe-no\"}>No Information</h5>\r\n//                                 </>\r\n//                             )}\r\n//                         </>\r\n//\r\n//\r\n//                     )}\r\n//                 </div>\r\n//                 <img src={Karte} alt={\"Karte\"} className={`Karte${abfrage ? ' in' : ''}`} />\r\n//             </div>\r\n//\r\n//             <div className={\"wip\"}>\r\n//                 <BarcodeReader\r\n//                     onError={handleError}\r\n//                     onScan={handleScan}\r\n//                 />\r\n//             </div>\r\n//         </div>\r\n//\r\n// );\r\n// };\r\n//\r\n// export default App;\r\n\r\n\r\n\r\n\r\n\r\n//todo Alt -> noch mal vergleichen, dann Löschen!\r\n\r\n\r\n// import React, { FC, useEffect, useState} from 'react';\r\n// import dayjs from \"dayjs\";\r\n// import './css/App.css'\r\n// import benzel from \"../src/images/app/grafik 1.png\"\r\n// import Vector from '../src/images/app/Vector.png'\r\n// import Karte from '../src/images/app/map.png'\r\n// import BarcodeReader from 'react-barcode-reader';\r\n//\r\n// const App: FC = () => {\r\n//     // Daten und Eingabe werden deklariert\r\n//     const [data, setData] = useState<any>(null);\r\n//     const [eingabe, setEingabe] = useState<string>(\"\");\r\n//     const [abfrage, setAbfrage] = useState<boolean>(false);\r\n//     const [warnung, setWarnung] = useState<boolean>(false);\r\n//     const [warnungText, setWarnungText] = useState<any>(null);\r\n//     const now: dayjs.Dayjs = dayjs();\r\n//     const exampleDate = dayjs('2023.01.01'); //todo: exampleDate muss durch now ersetzt werden\r\n//\r\n//     // console.log(data);\r\n//     console.log(warnungText);\r\n//\r\n//     //todo: weiter mit fetchData siehe Auskommentierter code\r\n//     const [noData, setNoData] = useState<boolean>();\r\n//     console.log(noData);\r\n//\r\n//     const [uid, setUid] = useState<string>(\"\");\r\n//     console.log(uid);\r\n//\r\n//     //Verarbeitung der eingabe des NFC-Scanners\r\n//     const handleScan = async (data: any) => {\r\n//         if (data !== \"\") {\r\n//             setUid(data);\r\n//             setEingabe(data);\r\n//             await fetchData(); // Warte auf die Datenabfrage, bevor du fortfährst\r\n//             setAbfrage(true);\r\n//         } else {\r\n//             alert(\"Leer nicht möglich\");\r\n//         }\r\n//     }\r\n//     const handleError = (err: any) => {\r\n//         console.error(err);\r\n//     }\r\n//\r\n//\r\n//     //Zeit nach der die Ausgabe beendet wird\r\n//     const normal = 10000; // 10 seconds\r\n//     const lang = 18000; // 18 seconds\r\n//\r\n//\r\n//     // Array mit Übersetzungen zu den Treffpunkten wird deklariert\r\n//     const waitingSpot: Record<string, string> = {\r\n//         bike: \"Fahrrad\",\r\n//         bottle: \"Flasche\",\r\n//         island: \"Insel\",\r\n//         keys: \"Schlüssel\",\r\n//         kitchen: \"Küche\",\r\n//         mic: \"Mikro\",\r\n//         mobile: \"Mobile Zellen\",\r\n//         sofa: \"Sofa\",\r\n//         star: \"Stern\",\r\n//         sun: \"Sonne\",\r\n//         tent: \"Zelt\",\r\n//         tree: \"Baum\",\r\n//         turtle: \"Taube\",\r\n//         window: \"bitte erfragen\"\r\n//     }\r\n//\r\n//     const days: Record<string, string> = {\r\n//         Mon: \"Mo, Mon\",\r\n//         Tue: \"Di, Tue\",\r\n//         Wed: \"Mi, Wed\",\r\n//         Thu: \"Do, Thue\",\r\n//         Fri: \"Fr, Fri\",\r\n//         Sat: \"Sa, Sat\",\r\n//         Sun: \"So, Sun\"\r\n//     }\r\n//\r\n//\r\n//     // const fetchData = async () => {\r\n//     //     try {\r\n//     //         if (eingabe.trim() !== \"\") { // Überprüfung, ob Eingabe leer ist\r\n//     //             const ausgabe = await fetch(`https://supporter.kulturkosmos.de/api/self-service/shifts/${eingabe}`);\r\n//     //             if (!ausgabe.ok) {\r\n//     //                 throw new Error('Fehler');\r\n//     //             }\r\n//     //             const jsonData = await ausgabe.json();\r\n//     //             const test = await fetch('https://supporter.kulturkosmos.de/api/self-service/special-information');\r\n//     //             const jsonTest = await test.json()\r\n//     //             if(jsonTest.data.text !== null){\r\n//     //                 setWarnung(true);\r\n//     //                 setWarnungText(jsonTest.data.text)\r\n//     //             }\r\n//     //             console.log(jsonTest.data.text);\r\n//     //\r\n//     //             //todo: Der Block hier ist nur zum testen\r\n//     //\r\n//     //             // console.log(jsonData.data);\r\n//     //             // console.log(jsonData.data === null); //todo: Hier weiter!!!!!\r\n//     //             if(jsonData.data === null){\r\n//     //                 // console.log(\"Keine Daten\");\r\n//     //                 setNoData(false);\r\n//     //                 // console.log(\"Keine Daten:\" + noData);\r\n//     //             } else {\r\n//     //                 // console.log(\"Hier sind die Daten:\" + jsonData.data);\r\n//     //                 setData(true);\r\n//     //                 // console.log(\"Hier gibt es Daten\" + noData)\r\n//     //             }\r\n//     //             setData(jsonData);\r\n//     //         }\r\n//     //     } catch (error) {\r\n//     //         console.error('Error fetching data:', error);\r\n//     //     }\r\n//     // };\r\n//\r\n//\r\n//\r\n//     const fetchData = async () => {\r\n//         try {\r\n//             const trimmedInput = eingabe.trim();\r\n//             if (trimmedInput !== \"\") {\r\n//                 const ausgabeResponse = await fetch(`https://supporter.kulturkosmos.de/api/self-service/shifts/${trimmedInput}`);\r\n//\r\n//                 if (!ausgabeResponse.ok) {\r\n//                     throw new Error('Fehler beim Abrufen der Schichtdaten');\r\n//                 }\r\n//\r\n//                 const jsonData = await ausgabeResponse.json();\r\n//                 const testResponse = await fetch('https://supporter.kulturkosmos.de/api/self-service/special-information');\r\n//                 const jsonTest = await testResponse.json();\r\n//\r\n//                 if (jsonTest.data.text) {\r\n//                     setWarnung(true);\r\n//                     setWarnungText(jsonTest.data.text);\r\n//                 }\r\n//\r\n//                 console.log(jsonTest.data.text !== null);\r\n//\r\n//                 if (jsonData.data === null) {\r\n//                     setNoData(true);\r\n//                 } else {\r\n//                     setData(jsonData);\r\n//                 }\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Fehler beim Abrufen der Daten:', error);\r\n//         }\r\n//     };\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//     const handleClick = () => {\r\n//         if(eingabe !== \"\"){\r\n//             fetchData();\r\n//             setAbfrage(true);\r\n//         }else {\r\n//             alert(\"Leer nicht möglich\")\r\n//         }\r\n//\r\n//     };\r\n//\r\n//     // Neu laden der Seite todo: Aktivieren wenn fertig :D ÄNDERN\r\n//     useEffect(() => {\r\n//         if (!data || data.data === null) {\r\n//             // console.log(\"Kein Ergebnis bei der Abfrage\");\r\n//             const timer = setTimeout(() => {\r\n//                 setAbfrage(false);\r\n//             }, 1000); // Timeout von 1 Sekunde\r\n//             return () => clearTimeout(timer);\r\n//         }\r\n//\r\n//         const timeoutDauer = abfrage && !warnung ? normal : lang;\r\n//         const timer = setTimeout(() => {\r\n//             setAbfrage(false);\r\n//         }, timeoutDauer);\r\n//\r\n//         return () => clearTimeout(timer);\r\n//     }, [abfrage, data, warnung, normal, lang]);\r\n\r\n\r\n// useEffect(() => {\r\n//     if (abfrage) {\r\n//         const timeoutDauer = warnung ? lang : normal;\r\n//         const timer = setTimeout(() => {\r\n//             setAbfrage(false);\r\n//             setWarnung(false);\r\n//         }, timeoutDauer);\r\n//\r\n//         return () => clearTimeout(timer);\r\n//     }\r\n// }, [abfrage, warnung, normal, lang]);\r\n\r\n\r\n\r\n\r\n//\r\n//     return (\r\n//         <div>\r\n//             <div className={\"grundflaeche\"}>\r\n//                 <div className={!abfrage ? \"box\" : \"box boxleft\"}>\r\n//                     {!abfrage ? (\r\n//                         <>\r\n//                             <h2>Supporter Schichtauskunft</h2>\r\n//                             <h3>Supporter Shiftinformation</h3>\r\n//                             <h4 className={\"deutsch\"}>Bitte halte dein Bändsel unter den Scanner</h4>\r\n//                             <h5 className={\"englisch\"}>Please hold your wristband under the scanner</h5>\r\n//                             <img src={benzel} alt=\"benzel\" className=\"benzel\" />\r\n//                         </>\r\n//                     ) :  (\r\n//                         <>\r\n//                             {warnung && (\r\n//                                 <div className={\"scroll-container\"}>\r\n//                                     <div className={\"warnung\"}>\r\n//                                         <div className={\"warnung-text\"}>{warnungText}</div>\r\n//                                     </div>\r\n//                                 </div>\r\n//                             )}\r\n//                             <h2>Supporter Schichtauskunft</h2>\r\n//                             <h3>Supporter Shiftinformation</h3>\r\n//                             <h4 className={\"deutsch-ausgabe\"}>Deine Schichten</h4>\r\n//                             <h5 className={\"englisch-ausgabe\"}>Your Shifts</h5>\r\n//\r\n//                             {/* Sortierung nur, wenn Daten vorhanden sind */}\r\n//                             {data && data.data && data.data.length > 0 && (\r\n//                                 <>\r\n//                                     {data.data\r\n//                                         //Filtern nach Datum\r\n//                                         .filter((entry: any) => dayjs(entry.startAt).isAfter(exampleDate) || dayjs(entry.startAt).isSame(exampleDate, 'day'))\r\n//                                         //Sortieren\r\n//                                         .sort((a: any, b: any) => dayjs(a.startAt).diff(exampleDate) - dayjs(b.startAt).diff(exampleDate))\r\n//                                         // Ausgabe von index 0 dann die ersten 3 -> 0, 1, 2\r\n//                                         .slice(0, 3)\r\n//\r\n//                                         .map((entry: any, index: number) => (\r\n//                                             <div className={\"ausgabeabfrage\"} key={index}>\r\n//                                                 <p className={\"index\"}>{index + 1}</p>\r\n//                                                 {/*Anzeige des Wochentags und des Datums im gewünschten Format*/}\r\n//                                                 <p className={\"days\"}><strong>{days[dayjs(entry.startAt).format('ddd')]}</strong> // {dayjs(entry.startAt).format('DD.MM - HH:mm')}</p>\r\n//                                                 {/*Anzeigen des Vectors*/}\r\n//                                                 <p className={\"vector\"}> <img src={Vector} alt=\"Vector\" className=\"Vector\" /></p>\r\n//                                                 {/*Anzeige des Wartebereichs*/}\r\n//                                                 <p className={\"place\"}>{waitingSpot[entry.waitingSpot]}</p>\r\n//                                                 <br />\r\n//                                             </div>\r\n//                                         ))\r\n//                                     }\r\n//                                 </>\r\n//                             )}\r\n//                         </>\r\n//\r\n//                     )}\r\n//                 </div>\r\n//                 <img src={Karte} alt={\"Karte\"} className={`Karte${abfrage ? ' in' : ''}`}  />\r\n//             </div>\r\n//\r\n//             <div className={\"wip\"}>\r\n//                 {/*<input*/}\r\n//                 {/*    type=\"text\"*/}\r\n//                 {/*    placeholder=\"ID\"*/}\r\n//                 {/*    value={eingabe}*/}\r\n//                 {/*    onChange={(e) => setEingabe(e.target.value)}*/}\r\n//                 {/*/>*/}\r\n//                 {/*<button onClick={handleClick}>Abfragen</button>*/}\r\n//                 {/*<button onClick={() => window.location.reload()}>Reset</button>*/}\r\n//                 {/*<button onClick={() => setEingabe(\"0492131A757780\")}>0492131A757780</button>*/}\r\n//                 {/*<button onClick={() => setEingabe(\"04ABE51A757780\")}>04ABE51A757780</button>*/}\r\n//                 {/*<button onClick={() => setEingabe(\"048DCC1A757780\")}>048DCC1A757780</button>*/}\r\n//                 {/*<button onClick={() => setEingabe(\"04E0FD1A757780\")} style={{ backgroundColor: 'green' }}>04E0FD1A757780</button>*/}\r\n//                 {/*<button onClick={() => setEingabe(\"049E0D1A757784\")}>049E0D1A757784</button>*/}\r\n//                 {/*<button onClick={() => setEingabe(\"0433541A757780\")}>0433541A757780</button>*/}\r\n//                 {/*<button onClick={() => setEingabe(\"04BB2B6ABE6F80\")}>04BB2B6ABE6F80</button>*/}\r\n//                 {/*<button onClick={() => setEingabe(\"04E0dwedefregfrfgrfgFD1A757780\")} style={{ backgroundColor: 'red' }}>04E0FD1A757780</button>*/}\r\n//\r\n//                 {/*<button onClick={() => setWarnung(true)}>Warnung An</button>*/}\r\n//                 {/*<button onClick={() => setWarnung(false)}>Warnung Aus</button>*/}\r\n//\r\n//\r\n//\r\n//                 <BarcodeReader\r\n//                     onError={handleError}\r\n//                     onScan={handleScan}\r\n//                 />\r\n//                 {/*{uid && <p>Barcode detected: {uid}</p>}*/}\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n//\r\n// export default App;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}