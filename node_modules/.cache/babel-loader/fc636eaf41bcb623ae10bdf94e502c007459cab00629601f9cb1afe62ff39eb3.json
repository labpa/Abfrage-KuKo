{"ast":null,"code":"// import React, { FC, useEffect, useState } from 'react';\n// import dayjs from \"dayjs\";\n// import './css/App.css';\n// import benzel from '../src/images/app/grafik 1.png';\n// import Vector from '../src/images/app/Vector.png';\n// import Karte from '../src/images/app/map.png';\n// import Pfeil from '../src/images/app/pfeil.png'\n// import Beschriftung from '../src/images/app/beschriftung.png'\n// import BarcodeReader from 'react-barcode-reader';\n//\n// const App: FC = () => {\n//     const [data, setData] = useState<any>(null);\n//     const [eingabe, setEingabe] = useState<string>(\"\");\n//     const [abfrage, setAbfrage] = useState<boolean>(false);\n//     const [warnung, setWarnung] = useState<boolean>(false);\n//     const [warnungText, setWarnungText] = useState<string | null>(null);\n//     // const now: dayjs.Dayjs = dayjs(); todo: exampleDate = now\n//     const exampleDate = dayjs('2023.01.01');\n//     const [noData, setNoData] = useState<boolean>(false);\n//     const [zaehler, setZaehler] = useState<number>(0);\n//\n//\n//     //Zeitangabe Anzeige Abfrage\n//     const normal = 10000; // 10 Sekunden -> Normale Abfrage\n//     const lang = 18000; // 18 Sekunden -> Abfrage mit Warnung\n//     const kurz = 3000; // 3 Sekunden -> Abfrage Falsche ID\n//\n//\n//     // Lookup-Tabellen\n//     // Treffpunkt\n//     const waitingSpot: Record<string, string> = {\n//         bike: \"Fahrrad\",\n//         bottle: \"Flasche\",\n//         island: \"Insel\",\n//         keys: \"Schlüssel\",\n//         kitchen: \"Küche\",\n//         mic: \"Mikro\",\n//         mobile: \"Mobile Zellen\",\n//         sofa: \"Sofa\",\n//         star: \"Stern\",\n//         sun: \"Sonne\",\n//         tent: \"Zelt\",\n//         tree: \"Baum\",\n//         turtle: \"Taube\",\n//         window: \"bitte erfragen\"\n//     };\n//\n//     //Übersetzung der Tage\n//     const days: Record<string, string> = {\n//         Mon: \"Mo, Mon\",\n//         Tue: \"Di, Tue\",\n//         Wed: \"Mi, Wed\",\n//         Thu: \"Do, Thu\",\n//         Fri: \"Fr, Fri\",\n//         Sat: \"Sa, Sat\",\n//         Sun: \"So, Sun\"\n//     };\n//\n//\n//     const counter = () => {\n//         setZaehler(prevCount => prevCount + 1); // Zustand aktualisieren\n//     }\n//\n//\n//     //NFC-Reader\n//     //Eingabe des NFC-Scanners wird verarbeitet\n//     const handleScan = async (data: string) => {\n//         if (data !== \"\") {\n//             setEingabe(data);\n//             await fetchData(data); // Warte auf die Datenabfrage, bevor du fortfährst\n//             setAbfrage(true);\n//\n//         } else {\n//             alert(\"Leer nicht möglich\");\n//         }\n//     };\n//\n//     //Im Falle eines Fehlers wird dieser ausgegeben\n//     const handleError = (err: any) => {\n//         console.error(err);\n//     };\n//\n//\n//     //API-Abfrage\n//     const fetchData = async (input: string) => {\n//         try {\n//             const trimmedInput = input.trim();\n//             if (trimmedInput !== \"\") {\n//                 const ausgabeResponse = await fetch(`https://supporter.kulturkosmos.de/api/self-service/shifts/${trimmedInput}`);\n//\n//                 if (!ausgabeResponse.ok) {\n//                     throw new Error('Fehler beim Abrufen der Schichtdaten');\n//                 }\n//\n//                 const jsonData = await ausgabeResponse.json();\n//                 const abfrageWarnung = await fetch('https://supporter.kulturkosmos.de/api/self-service/special-information');\n//                 const jsonWarnung = await abfrageWarnung.json();\n//\n//                 if (jsonWarnung.data && jsonWarnung.data.text) {\n//                     const textWithoutTags = jsonWarnung.data.text.replace(/<[^>]*>/g, ' ');\n//                     setWarnung(true);\n//                     setWarnungText(textWithoutTags);\n//                 }\n//\n//                 if (jsonData.data === null) {\n//                     setNoData(true);\n//                     setData(false);\n//                     setWarnung(false);\n//                 } else {\n//                     setData(jsonData);\n//                 }\n//             }\n//         } catch (error) {\n//             console.error('Fehler beim Abrufen der Daten:', error);\n//         }\n//     };\n//\n//\n//     //useEffect\n//     useEffect(() => {\n//         if (noData) {\n//             const timer = setTimeout(() => {\n//                 setNoData(false);\n//                 setWarnung(false);\n//                 setAbfrage(false);\n//             },kurz); // 3 seconds\n//             return () => clearTimeout(timer);\n//         }\n//\n//         if (abfrage) {\n//             const timeoutDauer = warnung ? lang : normal;\n//             const timer = setTimeout(() => {\n//                 setAbfrage(false);\n//                 setWarnung(false);\n//                 counter();\n//             }, timeoutDauer);\n//             return () => clearTimeout(timer);\n//         }\n//\n//     }, [abfrage, warnung, normal, lang, kurz,  noData]);\n//\n//\n//\n//     return (\n//         <div>\n//             <div className={\"grundflaeche\"}>\n//                 <div className={!abfrage ? \"box\" : \"box boxleft\"}>\n//                     {!abfrage ? (\n//                         <>\n//                             <h2>Supporter Schichtauskunft</h2>\n//                             <h3>Supporter Shiftinformation</h3>\n//                             <h4 className={\"deutsch\"}>Bitte halte dein Bändsel unter den Scanner</h4>\n//                             <h5 className={\"englisch\"}>Please hold your wristband under the scanner</h5>\n//                             <img src={benzel} alt=\"benzel\" className=\"benzel\" />\n//                         </>\n//                     ) : (\n//                         <>\n//                             {warnung && (\n//                                 <div className={\"scroll-container\"}>\n//                                     <div className={\"warnung\"}>\n//                                         <div className={\"warnung-text\"}>{warnungText}</div>\n//                                     </div>\n//                                 </div>\n//                             )}\n//                             <h2>Supporter Schichtauskunft</h2>\n//                             <h3>Supporter Shiftinformation</h3>\n//                             {data ? (\n//                                 <>\n//                                     <h4 className={\"deutsch-ausgabe\"}>Deine Schichten</h4>\n//                                     <h5 className={\"englisch-ausgabe\"}>Your Shifts</h5>\n//                                     {data.data && data.data.length > 0 ? (\n//                                         data.data\n//                                             .filter((entry: any) => dayjs(entry.startAt).isAfter(exampleDate) || dayjs(entry.startAt).isSame(exampleDate, 'day'))\n//                                             .sort((a: any, b: any) => dayjs(a.startAt).diff(exampleDate) - dayjs(b.startAt).diff(exampleDate))\n//                                             .slice(0, 3)\n//                                             .map((entry: any, index: number) => (\n//                                                 <div className={\"ausgabeabfrage\"} key={index}>\n//                                                     <p className={\"index\"}>{index + 1}</p>\n//                                                     <p className={\"days\"}><strong>{days[dayjs(entry.startAt).format('ddd')]}</strong> // {dayjs(entry.startAt).format('DD.MM - HH:mm')}</p>\n//                                                     {/*<p className={\"vector\"}> <img src={Vector} alt=\"Vector\" className=\"Vector\" /></p>*/}\n//                                                     <p className={\"place\"}><img src={Vector} alt=\"Vector\" className=\"Vector\" /> &nbsp; &nbsp; &nbsp;  {waitingSpot[entry.waitingSpot]}</p>\n//                                                     <br />\n//                                                 </div>\n//                                             ))\n//                                     ) : (\n//                                         <p></p>\n//                                     )}\n//                                 </>\n//                             ) : (\n//                                 noData && (\n//                                     <>\n//                                         <h4 className={\"deutsch-ausgabe-no\"}>Keine Informationen</h4>\n//                                         <h5 className={\"englisch-ausgabe-no\"}>No Information</h5>\n//                                     </>\n//                                 )\n//                             )}\n//                         </>\n//                     )}\n//                 </div>\n//                 <img src={Karte} alt={\"Karte\"} className={`Karte${abfrage ? ' in' : ''}`} />\n//                 <img src={Pfeil} alt={\"Pfeil\"} className={`Pfeil ${abfrage ? 'ok' : ''}`}/>\n//                 <img src={Beschriftung} alt={\"Beschriftung\"} className={`Beschriftung ${abfrage ? 'ko' : ''}`}/>\n//             </div>\n//\n//             <div className={\"wip\"}>\n//                 <BarcodeReader\n//                     onError={handleError}\n//                     onScan={handleScan}\n//                 />\n//             </div>\n//\n//             {zaehler}\n//         </div>\n//     );\n// };\n//\n// export default App;\n//\n// import React, { FC, useEffect, useState } from 'react';\n// import dayjs from \"dayjs\";\n// import './css/App.css';\n// import benzel from '../src/images/app/grafik 1.png';\n// import Vector from '../src/images/app/Vector.png';\n// import Karte from '../src/images/app/map.png';\n// import Pfeil from '../src/images/app/pfeil.png'\n// import Beschriftung from '../src/images/app/beschriftung.png'\n// import BarcodeReader from 'react-barcode-reader';\n//\n// const App: FC = () => {\n//     const [data, setData] = useState<any>(null);\n//     const [eingabe, setEingabe] = useState<string>(\"\");\n//     const [abfrage, setAbfrage] = useState<boolean>(false);\n//     const [warnung, setWarnung] = useState<boolean>(false);\n//     const [warnungText, setWarnungText] = useState<string | null>(null);\n//     // const now: dayjs.Dayjs = dayjs(); todo: exampleDate = now\n//     const exampleDate = dayjs('2023.01.01');\n//     const [noData, setNoData] = useState<boolean>(false);\n//     const [zaehler, setZaehler] = useState<number>(0);\n//     const [lastScannedId, setLastScannedId] = useState<string>(\"\");\n//\n//\n//     //Zeitangabe Anzeige Abfrage\n//     const normal = 10000; // 10 Sekunden -> Normale Abfrage\n//     const lang = 18000; // 18 Sekunden -> Abfrage mit Warnung\n//     const kurz = 3000; // 3 Sekunden -> Abfrage Falsche ID\n//\n//\n//     // Lookup-Tabellen\n//     // Treffpunkt\n//     const waitingSpot: Record<string, string> = {\n//         bike: \"Fahrrad\",\n//         bottle: \"Flasche\",\n//         island: \"Insel\",\n//         keys: \"Schlüssel\",\n//         kitchen: \"Küche\",\n//         mic: \"Mikro\",\n//         mobile: \"Mobile Zellen\",\n//         sofa: \"Sofa\",\n//         star: \"Stern\",\n//         sun: \"Sonne\",\n//         tent: \"Zelt\",\n//         tree: \"Baum\",\n//         turtle: \"Taube\",\n//         window: \"bitte erfragen\"\n//     };\n//\n//     //Übersetzung der Tage\n//     const days: Record<string, string> = {\n//         Mon: \"Mo, Mon\",\n//         Tue: \"Di, Tue\",\n//         Wed: \"Mi, Wed\",\n//         Thu: \"Do, Thu\",\n//         Fri: \"Fr, Fri\",\n//         Sat: \"Sa, Sat\",\n//         Sun: \"So, Sun\"\n//     };\n//\n//\n//     const counter = () => {\n//         setZaehler(prevCount => prevCount + 1); // Zustand aktualisieren\n//     }\n//\n//\n//     //NFC-Reader\n//     //Eingabe des NFC-Scanners wird verarbeitet\n//     const handleScan = async (data: string) => {\n//         if (data !== \"\" && data !== lastScannedId) {\n//             setEingabe(data);\n//             setLastScannedId(data);\n//             await fetchData(data); // Warte auf die Datenabfrage, bevor du fortfährst\n//             setAbfrage(true);\n//\n//         } else if (data === lastScannedId) {\n//             alert(\"Diese ID wurde bereits gescannt.\");\n//         } else {\n//             alert(\"Leer nicht möglich\");\n//         }\n//     };\n//\n//     //Im Falle eines Fehlers wird dieser ausgegeben\n//     const handleError = (err: any) => {\n//         console.error(err);\n//     };\n//\n//\n//     //API-Abfrage\n//     const fetchData = async (input: string) => {\n//         try {\n//             const trimmedInput = input.trim();\n//             if (trimmedInput !== \"\") {\n//                 const ausgabeResponse = await fetch(`https://supporter.kulturkosmos.de/api/self-service/shifts/${trimmedInput}`);\n//\n//                 if (!ausgabeResponse.ok) {\n//                     throw new Error('Fehler beim Abrufen der Schichtdaten');\n//                 }\n//\n//                 const jsonData = await ausgabeResponse.json();\n//                 const abfrageWarnung = await fetch('https://supporter.kulturkosmos.de/api/self-service/special-information');\n//                 const jsonWarnung = await abfrageWarnung.json();\n//\n//                 if (jsonWarnung.data && jsonWarnung.data.text) {\n//                     const textWithoutTags = jsonWarnung.data.text.replace(/<[^>]*>/g, ' ');\n//                     setWarnung(true);\n//                     setWarnungText(textWithoutTags);\n//                 }\n//\n//                 if (jsonData.data === null) {\n//                     setNoData(true);\n//                     setData(false);\n//                     setWarnung(false);\n//                 } else {\n//                     setData(jsonData);\n//                 }\n//             }\n//         } catch (error) {\n//             console.error('Fehler beim Abrufen der Daten:', error);\n//         }\n//     };\n//\n//\n//     //useEffect\n//     useEffect(() => {\n//         if (noData) {\n//             const timer = setTimeout(() => {\n//                 setNoData(false);\n//                 setWarnung(false);\n//                 setAbfrage(false);\n//             },kurz); // 3 seconds\n//             return () => clearTimeout(timer);\n//         }\n//\n//         if (abfrage) {\n//             const timeoutDauer = warnung ? lang : normal;\n//             const timer = setTimeout(() => {\n//                 setAbfrage(false);\n//                 setWarnung(false);\n//                 counter();\n//             }, timeoutDauer);\n//             return () => clearTimeout(timer);\n//         }\n//\n//     }, [abfrage, warnung, normal, lang, kurz,  noData]);\n//\n//\n//\n//     return (\n//         <div>\n//             <div className={\"grundflaeche\"}>\n//                 <div className={!abfrage ? \"box\" : \"box boxleft\"}>\n//                     {!abfrage ? (\n//                         <>\n//                             <h2>Supporter Schichtauskunft</h2>\n//                             <h3>Supporter Shiftinformation</h3>\n//                             <h4 className={\"deutsch\"}>Bitte halte dein Bändsel unter den Scanner</h4>\n//                             <h5 className={\"englisch\"}>Please hold your wristband under the scanner</h5>\n//                             <img src={benzel} alt=\"benzel\" className=\"benzel\" />\n//                         </>\n//                     ) : (\n//                         <>\n//                             {warnung && (\n//                                 <div className={\"scroll-container\"}>\n//                                     <div className={\"warnung\"}>\n//                                         <div className={\"warnung-text\"}>{warnungText}</div>\n//                                     </div>\n//                                 </div>\n//                             )}\n//                             <h2>Supporter Schichtauskunft</h2>\n//                             <h3>Supporter Shiftinformation</h3>\n//                             {data ? (\n//                                 <>\n//                                     <h4 className={\"deutsch-ausgabe\"}>Deine Schichten</h4>\n//                                     <h5 className={\"englisch-ausgabe\"}>Your Shifts</h5>\n//                                     {data.data && data.data.length > 0 ? (\n//                                         data.data\n//                                             .filter((entry: any) => dayjs(entry.startAt).isAfter(exampleDate) || dayjs(entry.startAt).isSame(exampleDate, 'day'))\n//                                             .sort((a: any, b: any) => dayjs(a.startAt).diff(exampleDate) - dayjs(b.startAt).diff(exampleDate))\n//                                             .slice(0, 3)\n//                                             .map((entry: any, index: number) => (\n//                                                 <div className={\"ausgabeabfrage\"} key={index}>\n//                                                     <p className={\"index\"}>{index + 1}</p>\n//                                                     <p className={\"days\"}><strong>{days[dayjs(entry.startAt).format('ddd')]}</strong> // {dayjs(entry.startAt).format('DD.MM - HH:mm')}</p>\n//                                                     {/*<p className={\"vector\"}> <img src={Vector} alt=\"Vector\" className=\"Vector\" /></p>*/}\n//                                                     <p className={\"place\"}><img src={Vector} alt=\"Vector\" className=\"Vector\" /> &nbsp; &nbsp; &nbsp;  {waitingSpot[entry.waitingSpot]}</p>\n//                                                     <br />\n//                                                 </div>\n//                                             ))\n//                                     ) : (\n//                                         <p></p>\n//                                     )}\n//                                 </>\n//                             ) : (\n//                                 noData && (\n//                                     <>\n//                                         <h4 className={\"deutsch-ausgabe-no\"}>Keine Informationen</h4>\n//                                         <h5 className={\"englisch-ausgabe-no\"}>No Information</h5>\n//                                     </>\n//                                 )\n//                             )}\n//                         </>\n//                     )}\n//                 </div>\n//                 <img src={Karte} alt={\"Karte\"} className={`Karte${abfrage ? ' in' : ''}`} />\n//                 <img src={Pfeil} alt={\"Pfeil\"} className={`Pfeil ${abfrage ? 'ok' : ''}`}/>\n//                 <img src={Beschriftung} alt={\"Beschriftung\"} className={`Beschriftung ${abfrage ? 'ko' : ''}`}/>\n//             </div>\n//\n//             <div className={\"wip\"}>\n//                 <BarcodeReader\n//                     onError={handleError}\n//                     onScan={handleScan}\n//                 />\n//             </div>\n//\n//             {zaehler}\n//         </div>\n//     );\n// };\n//\n// export default App;\n//\n// import React, { FC, useEffect, useState } from 'react';\n// import dayjs from \"dayjs\";\n// import './css/App.css';\n// import benzel from '../src/images/app/grafik 1.png';\n// import Vector from '../src/images/app/Vector.png';\n// import Karte from '../src/images/app/map.png';\n// import Pfeil from '../src/images/app/pfeil.png'\n// import Beschriftung from '../src/images/app/beschriftung.png'\n// import BarcodeReader from 'react-barcode-reader';\n//\n// const App: FC = () => {\n//     const [data, setData] = useState<any>(null);\n//     const [eingabe, setEingabe] = useState<string>(\"\");\n//     const [abfrage, setAbfrage] = useState<boolean>(false);\n//     const [warnung, setWarnung] = useState<boolean>(false);\n//     const [warnungText, setWarnungText] = useState<string | null>(null);\n//     // const now: dayjs.Dayjs = dayjs(); todo: exampleDate = now\n//     const exampleDate = dayjs('2023.01.01');\n//     const [noData, setNoData] = useState<boolean>(false);\n//     const [zaehler, setZaehler] = useState<number>(0);\n//     const [lastScannedId, setLastScannedId] = useState<string>(\"\");\n//\n//     //Zeitangabe Anzeige Abfrage\n//     const normal = 10000; // 10 Sekunden -> Normale Abfrage\n//     const lang = 18000; // 18 Sekunden -> Abfrage mit Warnung\n//     const kurz = 3000; // 3 Sekunden -> Abfrage Falsche ID\n//\n//     // Lookup-Tabellen\n//     // Treffpunkt\n//     const waitingSpot: Record<string, string> = {\n//         bike: \"Fahrrad\",\n//         bottle: \"Flasche\",\n//         island: \"Insel\",\n//         keys: \"Schlüssel\",\n//         kitchen: \"Küche\",\n//         mic: \"Mikro\",\n//         mobile: \"Mobile Zellen\",\n//         sofa: \"Sofa\",\n//         star: \"Stern\",\n//         sun: \"Sonne\",\n//         tent: \"Zelt\",\n//         tree: \"Baum\",\n//         turtle: \"Taube\",\n//         window: \"bitte erfragen\"\n//     };\n//\n//     //Übersetzung der Tage\n//     const days: Record<string, string> = {\n//         Mon: \"Mo, Mon\",\n//         Tue: \"Di, Tue\",\n//         Wed: \"Mi, Wed\",\n//         Thu: \"Do, Thu\",\n//         Fri: \"Fr, Fri\",\n//         Sat: \"Sa, Sat\",\n//         Sun: \"So, Sun\"\n//     };\n//\n//     const counter = () => {\n//         setZaehler(prevCount => prevCount + 1); // Zustand aktualisieren\n//     }\n//\n//     //NFC-Reader\n//     //Eingabe des NFC-Scanners wird verarbeitet\n//     const handleScan = async (data: string) => {\n//         if (data !== \"\" && data !== lastScannedId) {\n//             setEingabe(data);\n//             setLastScannedId(data);\n//             await fetchData(data); // Warte auf die Datenabfrage, bevor du fortfährst\n//             setAbfrage(true);\n//         }\n//     };\n//\n//     //Im Falle eines Fehlers wird dieser ausgegeben\n//     const handleError = (err: any) => {\n//         console.error(err);\n//     };\n//\n//     //API-Abfrage\n//     const fetchData = async (input: string) => {\n//         try {\n//             const trimmedInput = input.trim();\n//             if (trimmedInput !== \"\") {\n//                 const ausgabeResponse = await fetch(`https://supporter.kulturkosmos.de/api/self-service/shifts/${trimmedInput}`);\n//\n//                 if (!ausgabeResponse.ok) {\n//                     throw new Error('Fehler beim Abrufen der Schichtdaten');\n//                 }\n//\n//                 const jsonData = await ausgabeResponse.json();\n//                 const abfrageWarnung = await fetch('https://supporter.kulturkosmos.de/api/self-service/special-information');\n//                 const jsonWarnung = await abfrageWarnung.json();\n//\n//                 if (jsonWarnung.data && jsonWarnung.data.text) {\n//                     const textWithoutTags = jsonWarnung.data.text.replace(/<[^>]*>/g, ' ');\n//                     setWarnung(true);\n//                     setWarnungText(textWithoutTags);\n//                 }\n//\n//                 if (jsonData.data === null) {\n//                     setNoData(true);\n//                     setData(false);\n//                     setWarnung(false);\n//                 } else {\n//                     setData(jsonData);\n//                 }\n//             }\n//         } catch (error) {\n//             console.error('Fehler beim Abrufen der Daten:', error);\n//         }\n//     };\n//\n//     //useEffect\n//     useEffect(() => {\n//         if (noData) {\n//             const timer = setTimeout(() => {\n//                 setNoData(false);\n//                 setWarnung(false);\n//                 setAbfrage(false);\n//             }, kurz); // 3 seconds\n//             return () => clearTimeout(timer);\n//         }\n//\n//         if (abfrage) {\n//             const timeoutDauer = warnung ? lang : normal;\n//             const timer = setTimeout(() => {\n//                 setAbfrage(false);\n//                 setWarnung(false);\n//                 counter();\n//             }, timeoutDauer);\n//             return () => clearTimeout(timer);\n//         }\n//\n//     }, [abfrage, warnung, normal, lang, kurz, noData]);\n//\n//     return (\n//         <div>\n//             <div className={\"grundflaeche\"}>\n//                 <div className={!abfrage ? \"box\" : \"box boxleft\"}>\n//                     {!abfrage ? (\n//                         <>\n//                             <h2>Supporter Schichtauskunft</h2>\n//                             <h3>Supporter Shiftinformation</h3>\n//                             <h4 className={\"deutsch\"}>Bitte halte dein Bändsel unter den Scanner</h4>\n//                             <h5 className={\"englisch\"}>Please hold your wristband under the scanner</h5>\n//                             <img src={benzel} alt=\"benzel\" className=\"benzel\" />\n//                         </>\n//                     ) : (\n//                         <>\n//                             {warnung && (\n//                                 <div className={\"scroll-container\"}>\n//                                     <div className={\"warnung\"}>\n//                                         <div className={\"warnung-text\"}>{warnungText}</div>\n//                                     </div>\n//                                 </div>\n//                             )}\n//                             <h2>Supporter Schichtauskunft</h2>\n//                             <h3>Supporter Shiftinformation</h3>\n//                             {data ? (\n//                                 <>\n//                                     <h4 className={\"deutsch-ausgabe\"}>Deine Schichten</h4>\n//                                     <h5 className={\"englisch-ausgabe\"}>Your Shifts</h5>\n//                                     {data.data && data.data.length > 0 ? (\n//                                         data.data\n//                                             .filter((entry: any) => dayjs(entry.startAt).isAfter(exampleDate) || dayjs(entry.startAt).isSame(exampleDate, 'day'))\n//                                             .sort((a: any, b: any) => dayjs(a.startAt).diff(exampleDate) - dayjs(b.startAt).diff(exampleDate))\n//                                             .slice(0, 3)\n//                                             .map((entry: any, index: number) => (\n//                                                 <div className={\"ausgabeabfrage\"} key={index}>\n//                                                     <p className={\"index\"}>{index + 1}</p>\n//                                                     <p className={\"days\"}><strong>{days[dayjs(entry.startAt).format('ddd')]}</strong> // {dayjs(entry.startAt).format('DD.MM - HH:mm')}</p>\n//                                                     {/*<p className={\"vector\"}> <img src={Vector} alt=\"Vector\" className=\"Vector\" /></p>*/}\n//                                                     <p className={\"place\"}><img src={Vector} alt=\"Vector\" className=\"Vector\" /> &nbsp; &nbsp; &nbsp;  {waitingSpot[entry.waitingSpot]}</p>\n//                                                     <br />\n//                                                 </div>\n//                                             ))\n//                                     ) : (\n//                                         <p></p>\n//                                     )}\n//                                 </>\n//                             ) : (\n//                                 noData && (\n//                                     <>\n//                                         <h4 className={\"deutsch-ausgabe-no\"}>Keine Informationen</h4>\n//                                         <h5 className={\"englisch-ausgabe-no\"}>No Information</h5>\n//                                     </>\n//                                 )\n//                             )}\n//                         </>\n//                     )}\n//                 </div>\n//                 <img src={Karte} alt={\"Karte\"} className={`Karte${abfrage ? ' in' : ''}`} />\n//                 <img src={Pfeil} alt={\"Pfeil\"} className={`Pfeil ${abfrage ? 'ok' : ''}`}/>\n//                 <img src={Beschriftung} alt={\"Beschriftung\"} className={`Beschriftung ${abfrage ? 'ko' : ''}`}/>\n//             </div>\n//\n//             <div className={\"wip\"}>\n//                 <BarcodeReader\n//                     onError={handleError}\n//                     onScan={handleScan}\n//                 />\n//             </div>\n//\n//             {zaehler}\n//         </div>\n//     );\n// };\n//\n// export default App;\nimport React,{useState}from'react';import dayjs from\"dayjs\";import'./css/App.css';import benzel from'../src/images/app/grafik 1.png';import Vector from'../src/images/app/Vector.png';import Karte from'../src/images/app/SupporterMap2024.png';import Pfeil from'../src/images/app/pfeil.png';import Beschriftung from'../src/images/app/beschriftung.png';import BarcodeReader from'react-barcode-reader';import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";const App=()=>{const[data,setData]=useState(null);const[eingabe,setEingabe]=useState(\"\");const[abfrage,setAbfrage]=useState(false);const[warnung,setWarnung]=useState(false);const[warnungText,setWarnungText]=useState(null);const exampleDate=dayjs('2023.01.01');const[noData,setNoData]=useState(false);// const [zaehler, setZaehler] = useState<number>(0);\nconst[lastScannedId,setLastScannedId]=useState(\"\");const[scanTimeout,setScanTimeout]=useState(null);// Zeitangabe Anzeige Abfrage\nconst normal=10000;// 10 Sekunden -> Normale Abfrage\nconst lang=18000;// 18 Sekunden -> Abfrage mit Warnung\nconst kurz=3000;// 3 Sekunden -> Abfrage Falsche ID\nconst resetTime=15000;// 15 Sekunden -> Zeit nach der eine ID wieder gescannt werden kann\n// Lookup-Tabellen\nconst waitingSpot={bike:\"Fahrrad\",bottle:\"Flasche\",island:\"Insel\",keys:\"Schlüssel\",kitchen:\"Küche\",mic:\"Mikro\",mobile:\"Mobile Zellen\",sofa:\"Sofa\",star:\"Stern\",sun:\"Sonne\",tent:\"Zelt\",tree:\"Baum\",turtle:\"Taube\",window:\"bitte erfragen\"};const days={Mon:\"Mo, Mon\",Tue:\"Di, Tue\",Wed:\"Mi, Wed\",Thu:\"Do, Thu\",Fri:\"Fr, Fri\",Sat:\"Sa, Sat\",Sun:\"So, Sun\"};// const counter = () => {\n//     setZaehler(prevCount => prevCount + 1); // Zustand aktualisieren\n// };\nconst resetLastScannedId=()=>{setLastScannedId(\"\");};// NFC-Reader\nconst handleScan=async data=>{if(data!==\"\"&&data!==lastScannedId){setEingabe(data);setLastScannedId(data);await fetchData(data);// Warte auf die Datenabfrage, bevor du fortfährst\nsetAbfrage(true);if(scanTimeout){clearTimeout(scanTimeout);}setScanTimeout(setTimeout(resetLastScannedId,resetTime));}};const handleError=err=>{console.error(err);};const fetchData=async input=>{try{const trimmedInput=input.trim();if(trimmedInput!==\"\"){const ausgabeResponse=await fetch(\"https://supporter.kulturkosmos.de/api/self-service/shifts/\".concat(trimmedInput));if(!ausgabeResponse.ok){throw new Error('Fehler beim Abrufen der Schichtdaten');}const jsonData=await ausgabeResponse.json();const abfrageWarnung=await fetch('https://supporter.kulturkosmos.de/api/self-service/special-information');const jsonWarnung=await abfrageWarnung.json();if(jsonWarnung.data&&jsonWarnung.data.text){const textWithoutTags=jsonWarnung.data.text.replace(/<[^>]*>/g,' ');setWarnung(true);setWarnungText(textWithoutTags);}if(jsonData.data===null){setNoData(true);setData(false);setWarnung(false);}else{setData(jsonData);}}}catch(error){console.error('Fehler beim Abrufen der Daten:',error);}};// useEffect(() => {\n//     if (noData) {\n//         const timer = setTimeout(() => {\n//             setNoData(false);\n//             setWarnung(false);\n//             setAbfrage(false);\n//         }, kurz); // 3 seconds\n//         return () => clearTimeout(timer);\n//     }\n//\n//     if (abfrage) {\n//         const timeoutDauer = warnung ? lang : normal;\n//         const timer = setTimeout(() => {\n//             setAbfrage(false);\n//             setWarnung(false);\n//             // counter();\n//         }, timeoutDauer);\n//         return () => clearTimeout(timer);\n//     }\n//\n// }, [abfrage, warnung, normal, lang, kurz, noData]);\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"grundflaeche\",children:[/*#__PURE__*/_jsx(\"div\",{className:!abfrage?\"box\":\"box boxleft\",children:!abfrage?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Supporter:innen Schichtauskunft\"}),/*#__PURE__*/_jsx(\"h3\",{children:\"Supporter:innen Shiftinformation\"}),/*#__PURE__*/_jsx(\"h4\",{className:\"deutsch\",children:\"Bitte halte dein B\\xE4ndsel unter den Scanner\"}),/*#__PURE__*/_jsx(\"h5\",{className:\"englisch\",children:\"Please hold your wristband under the scanner\"}),/*#__PURE__*/_jsx(\"img\",{src:benzel,alt:\"benzel\",className:\"benzel\"})]}):/*#__PURE__*/_jsxs(_Fragment,{children:[warnung&&/*#__PURE__*/_jsx(\"div\",{className:\"scroll-container\",children:/*#__PURE__*/_jsx(\"div\",{className:\"warnung\",children:/*#__PURE__*/_jsx(\"div\",{className:\"warnung-text\",children:warnungText})})}),/*#__PURE__*/_jsx(\"h2\",{children:\"Supporter Schichtauskunft\"}),/*#__PURE__*/_jsx(\"h3\",{children:\"Supporter Shiftinformation\"}),data?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h4\",{className:\"deutsch-ausgabe\",children:\"Deine Schichten\"}),/*#__PURE__*/_jsx(\"h5\",{className:\"englisch-ausgabe\",children:\"Your Shifts\"}),data.data&&data.data.length>0?data.data.filter(entry=>dayjs(entry.startAt).isAfter(exampleDate)||dayjs(entry.startAt).isSame(exampleDate,'day')).sort((a,b)=>dayjs(a.startAt).diff(exampleDate)-dayjs(b.startAt).diff(exampleDate)).slice(0,3).map((entry,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"ausgabeabfrage\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"index\",children:index+1}),/*#__PURE__*/_jsxs(\"p\",{className:\"days\",children:[/*#__PURE__*/_jsx(\"strong\",{children:days[dayjs(entry.startAt).format('ddd')]}),\" // \",dayjs(entry.startAt).format('DD.MM - HH:mm')]}),/*#__PURE__*/_jsxs(\"p\",{className:\"place\",children:[/*#__PURE__*/_jsx(\"img\",{src:Vector,alt:\"Vector\",className:\"Vector\"}),\" \\xA0 \\xA0 \\xA0  \",waitingSpot[entry.waitingSpot]]}),/*#__PURE__*/_jsx(\"br\",{})]},index)):/*#__PURE__*/_jsx(\"p\",{})]}):noData&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h4\",{className:\"deutsch-ausgabe-no\",children:\"Keine Informationen\"}),/*#__PURE__*/_jsx(\"h5\",{className:\"englisch-ausgabe-no\",children:\"No Information\"})]})]})}),/*#__PURE__*/_jsx(\"img\",{src:Karte,alt:\"Karte\",className:\"Karte\".concat(abfrage?' in':'')}),/*#__PURE__*/_jsx(\"img\",{src:Pfeil,alt:\"Pfeil\",className:\"Pfeil \".concat(abfrage?'ok':'')}),/*#__PURE__*/_jsx(\"img\",{src:Beschriftung,alt:\"Beschriftung\",className:\"Beschriftung \".concat(abfrage?'ko':'')})]}),/*#__PURE__*/_jsx(\"div\",{className:\"wip\",children:/*#__PURE__*/_jsx(BarcodeReader,{onError:handleError,onScan:handleScan})})]});};export default App;","map":{"version":3,"names":["React","useState","dayjs","benzel","Vector","Karte","Pfeil","Beschriftung","BarcodeReader","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","App","data","setData","eingabe","setEingabe","abfrage","setAbfrage","warnung","setWarnung","warnungText","setWarnungText","exampleDate","noData","setNoData","lastScannedId","setLastScannedId","scanTimeout","setScanTimeout","normal","lang","kurz","resetTime","waitingSpot","bike","bottle","island","keys","kitchen","mic","mobile","sofa","star","sun","tent","tree","turtle","window","days","Mon","Tue","Wed","Thu","Fri","Sat","Sun","resetLastScannedId","handleScan","fetchData","clearTimeout","setTimeout","handleError","err","console","error","input","trimmedInput","trim","ausgabeResponse","fetch","concat","ok","Error","jsonData","json","abfrageWarnung","jsonWarnung","text","textWithoutTags","replace","children","className","src","alt","length","filter","entry","startAt","isAfter","isSame","sort","a","b","diff","slice","map","index","format","onError","onScan"],"sources":["/home/pascal/Projekte/abfrage-api-supporter/src/App.tsx"],"sourcesContent":["// import React, { FC, useEffect, useState } from 'react';\n// import dayjs from \"dayjs\";\n// import './css/App.css';\n// import benzel from '../src/images/app/grafik 1.png';\n// import Vector from '../src/images/app/Vector.png';\n// import Karte from '../src/images/app/map.png';\n// import Pfeil from '../src/images/app/pfeil.png'\n// import Beschriftung from '../src/images/app/beschriftung.png'\n// import BarcodeReader from 'react-barcode-reader';\n//\n// const App: FC = () => {\n//     const [data, setData] = useState<any>(null);\n//     const [eingabe, setEingabe] = useState<string>(\"\");\n//     const [abfrage, setAbfrage] = useState<boolean>(false);\n//     const [warnung, setWarnung] = useState<boolean>(false);\n//     const [warnungText, setWarnungText] = useState<string | null>(null);\n//     // const now: dayjs.Dayjs = dayjs(); todo: exampleDate = now\n//     const exampleDate = dayjs('2023.01.01');\n//     const [noData, setNoData] = useState<boolean>(false);\n//     const [zaehler, setZaehler] = useState<number>(0);\n//\n//\n//     //Zeitangabe Anzeige Abfrage\n//     const normal = 10000; // 10 Sekunden -> Normale Abfrage\n//     const lang = 18000; // 18 Sekunden -> Abfrage mit Warnung\n//     const kurz = 3000; // 3 Sekunden -> Abfrage Falsche ID\n//\n//\n//     // Lookup-Tabellen\n//     // Treffpunkt\n//     const waitingSpot: Record<string, string> = {\n//         bike: \"Fahrrad\",\n//         bottle: \"Flasche\",\n//         island: \"Insel\",\n//         keys: \"Schlüssel\",\n//         kitchen: \"Küche\",\n//         mic: \"Mikro\",\n//         mobile: \"Mobile Zellen\",\n//         sofa: \"Sofa\",\n//         star: \"Stern\",\n//         sun: \"Sonne\",\n//         tent: \"Zelt\",\n//         tree: \"Baum\",\n//         turtle: \"Taube\",\n//         window: \"bitte erfragen\"\n//     };\n//\n//     //Übersetzung der Tage\n//     const days: Record<string, string> = {\n//         Mon: \"Mo, Mon\",\n//         Tue: \"Di, Tue\",\n//         Wed: \"Mi, Wed\",\n//         Thu: \"Do, Thu\",\n//         Fri: \"Fr, Fri\",\n//         Sat: \"Sa, Sat\",\n//         Sun: \"So, Sun\"\n//     };\n//\n//\n//     const counter = () => {\n//         setZaehler(prevCount => prevCount + 1); // Zustand aktualisieren\n//     }\n//\n//\n//     //NFC-Reader\n//     //Eingabe des NFC-Scanners wird verarbeitet\n//     const handleScan = async (data: string) => {\n//         if (data !== \"\") {\n//             setEingabe(data);\n//             await fetchData(data); // Warte auf die Datenabfrage, bevor du fortfährst\n//             setAbfrage(true);\n//\n//         } else {\n//             alert(\"Leer nicht möglich\");\n//         }\n//     };\n//\n//     //Im Falle eines Fehlers wird dieser ausgegeben\n//     const handleError = (err: any) => {\n//         console.error(err);\n//     };\n//\n//\n//     //API-Abfrage\n//     const fetchData = async (input: string) => {\n//         try {\n//             const trimmedInput = input.trim();\n//             if (trimmedInput !== \"\") {\n//                 const ausgabeResponse = await fetch(`https://supporter.kulturkosmos.de/api/self-service/shifts/${trimmedInput}`);\n//\n//                 if (!ausgabeResponse.ok) {\n//                     throw new Error('Fehler beim Abrufen der Schichtdaten');\n//                 }\n//\n//                 const jsonData = await ausgabeResponse.json();\n//                 const abfrageWarnung = await fetch('https://supporter.kulturkosmos.de/api/self-service/special-information');\n//                 const jsonWarnung = await abfrageWarnung.json();\n//\n//                 if (jsonWarnung.data && jsonWarnung.data.text) {\n//                     const textWithoutTags = jsonWarnung.data.text.replace(/<[^>]*>/g, ' ');\n//                     setWarnung(true);\n//                     setWarnungText(textWithoutTags);\n//                 }\n//\n//                 if (jsonData.data === null) {\n//                     setNoData(true);\n//                     setData(false);\n//                     setWarnung(false);\n//                 } else {\n//                     setData(jsonData);\n//                 }\n//             }\n//         } catch (error) {\n//             console.error('Fehler beim Abrufen der Daten:', error);\n//         }\n//     };\n//\n//\n//     //useEffect\n//     useEffect(() => {\n//         if (noData) {\n//             const timer = setTimeout(() => {\n//                 setNoData(false);\n//                 setWarnung(false);\n//                 setAbfrage(false);\n//             },kurz); // 3 seconds\n//             return () => clearTimeout(timer);\n//         }\n//\n//         if (abfrage) {\n//             const timeoutDauer = warnung ? lang : normal;\n//             const timer = setTimeout(() => {\n//                 setAbfrage(false);\n//                 setWarnung(false);\n//                 counter();\n//             }, timeoutDauer);\n//             return () => clearTimeout(timer);\n//         }\n//\n//     }, [abfrage, warnung, normal, lang, kurz,  noData]);\n//\n//\n//\n//     return (\n//         <div>\n//             <div className={\"grundflaeche\"}>\n//                 <div className={!abfrage ? \"box\" : \"box boxleft\"}>\n//                     {!abfrage ? (\n//                         <>\n//                             <h2>Supporter Schichtauskunft</h2>\n//                             <h3>Supporter Shiftinformation</h3>\n//                             <h4 className={\"deutsch\"}>Bitte halte dein Bändsel unter den Scanner</h4>\n//                             <h5 className={\"englisch\"}>Please hold your wristband under the scanner</h5>\n//                             <img src={benzel} alt=\"benzel\" className=\"benzel\" />\n//                         </>\n//                     ) : (\n//                         <>\n//                             {warnung && (\n//                                 <div className={\"scroll-container\"}>\n//                                     <div className={\"warnung\"}>\n//                                         <div className={\"warnung-text\"}>{warnungText}</div>\n//                                     </div>\n//                                 </div>\n//                             )}\n//                             <h2>Supporter Schichtauskunft</h2>\n//                             <h3>Supporter Shiftinformation</h3>\n//                             {data ? (\n//                                 <>\n//                                     <h4 className={\"deutsch-ausgabe\"}>Deine Schichten</h4>\n//                                     <h5 className={\"englisch-ausgabe\"}>Your Shifts</h5>\n//                                     {data.data && data.data.length > 0 ? (\n//                                         data.data\n//                                             .filter((entry: any) => dayjs(entry.startAt).isAfter(exampleDate) || dayjs(entry.startAt).isSame(exampleDate, 'day'))\n//                                             .sort((a: any, b: any) => dayjs(a.startAt).diff(exampleDate) - dayjs(b.startAt).diff(exampleDate))\n//                                             .slice(0, 3)\n//                                             .map((entry: any, index: number) => (\n//                                                 <div className={\"ausgabeabfrage\"} key={index}>\n//                                                     <p className={\"index\"}>{index + 1}</p>\n//                                                     <p className={\"days\"}><strong>{days[dayjs(entry.startAt).format('ddd')]}</strong> // {dayjs(entry.startAt).format('DD.MM - HH:mm')}</p>\n//                                                     {/*<p className={\"vector\"}> <img src={Vector} alt=\"Vector\" className=\"Vector\" /></p>*/}\n//                                                     <p className={\"place\"}><img src={Vector} alt=\"Vector\" className=\"Vector\" /> &nbsp; &nbsp; &nbsp;  {waitingSpot[entry.waitingSpot]}</p>\n//                                                     <br />\n//                                                 </div>\n//                                             ))\n//                                     ) : (\n//                                         <p></p>\n//                                     )}\n//                                 </>\n//                             ) : (\n//                                 noData && (\n//                                     <>\n//                                         <h4 className={\"deutsch-ausgabe-no\"}>Keine Informationen</h4>\n//                                         <h5 className={\"englisch-ausgabe-no\"}>No Information</h5>\n//                                     </>\n//                                 )\n//                             )}\n//                         </>\n//                     )}\n//                 </div>\n//                 <img src={Karte} alt={\"Karte\"} className={`Karte${abfrage ? ' in' : ''}`} />\n//                 <img src={Pfeil} alt={\"Pfeil\"} className={`Pfeil ${abfrage ? 'ok' : ''}`}/>\n//                 <img src={Beschriftung} alt={\"Beschriftung\"} className={`Beschriftung ${abfrage ? 'ko' : ''}`}/>\n//             </div>\n//\n//             <div className={\"wip\"}>\n//                 <BarcodeReader\n//                     onError={handleError}\n//                     onScan={handleScan}\n//                 />\n//             </div>\n//\n//             {zaehler}\n//         </div>\n//     );\n// };\n//\n// export default App;\n\n\n\n\n\n\n\n\n\n\n//\n// import React, { FC, useEffect, useState } from 'react';\n// import dayjs from \"dayjs\";\n// import './css/App.css';\n// import benzel from '../src/images/app/grafik 1.png';\n// import Vector from '../src/images/app/Vector.png';\n// import Karte from '../src/images/app/map.png';\n// import Pfeil from '../src/images/app/pfeil.png'\n// import Beschriftung from '../src/images/app/beschriftung.png'\n// import BarcodeReader from 'react-barcode-reader';\n//\n// const App: FC = () => {\n//     const [data, setData] = useState<any>(null);\n//     const [eingabe, setEingabe] = useState<string>(\"\");\n//     const [abfrage, setAbfrage] = useState<boolean>(false);\n//     const [warnung, setWarnung] = useState<boolean>(false);\n//     const [warnungText, setWarnungText] = useState<string | null>(null);\n//     // const now: dayjs.Dayjs = dayjs(); todo: exampleDate = now\n//     const exampleDate = dayjs('2023.01.01');\n//     const [noData, setNoData] = useState<boolean>(false);\n//     const [zaehler, setZaehler] = useState<number>(0);\n//     const [lastScannedId, setLastScannedId] = useState<string>(\"\");\n//\n//\n//     //Zeitangabe Anzeige Abfrage\n//     const normal = 10000; // 10 Sekunden -> Normale Abfrage\n//     const lang = 18000; // 18 Sekunden -> Abfrage mit Warnung\n//     const kurz = 3000; // 3 Sekunden -> Abfrage Falsche ID\n//\n//\n//     // Lookup-Tabellen\n//     // Treffpunkt\n//     const waitingSpot: Record<string, string> = {\n//         bike: \"Fahrrad\",\n//         bottle: \"Flasche\",\n//         island: \"Insel\",\n//         keys: \"Schlüssel\",\n//         kitchen: \"Küche\",\n//         mic: \"Mikro\",\n//         mobile: \"Mobile Zellen\",\n//         sofa: \"Sofa\",\n//         star: \"Stern\",\n//         sun: \"Sonne\",\n//         tent: \"Zelt\",\n//         tree: \"Baum\",\n//         turtle: \"Taube\",\n//         window: \"bitte erfragen\"\n//     };\n//\n//     //Übersetzung der Tage\n//     const days: Record<string, string> = {\n//         Mon: \"Mo, Mon\",\n//         Tue: \"Di, Tue\",\n//         Wed: \"Mi, Wed\",\n//         Thu: \"Do, Thu\",\n//         Fri: \"Fr, Fri\",\n//         Sat: \"Sa, Sat\",\n//         Sun: \"So, Sun\"\n//     };\n//\n//\n//     const counter = () => {\n//         setZaehler(prevCount => prevCount + 1); // Zustand aktualisieren\n//     }\n//\n//\n//     //NFC-Reader\n//     //Eingabe des NFC-Scanners wird verarbeitet\n//     const handleScan = async (data: string) => {\n//         if (data !== \"\" && data !== lastScannedId) {\n//             setEingabe(data);\n//             setLastScannedId(data);\n//             await fetchData(data); // Warte auf die Datenabfrage, bevor du fortfährst\n//             setAbfrage(true);\n//\n//         } else if (data === lastScannedId) {\n//             alert(\"Diese ID wurde bereits gescannt.\");\n//         } else {\n//             alert(\"Leer nicht möglich\");\n//         }\n//     };\n//\n//     //Im Falle eines Fehlers wird dieser ausgegeben\n//     const handleError = (err: any) => {\n//         console.error(err);\n//     };\n//\n//\n//     //API-Abfrage\n//     const fetchData = async (input: string) => {\n//         try {\n//             const trimmedInput = input.trim();\n//             if (trimmedInput !== \"\") {\n//                 const ausgabeResponse = await fetch(`https://supporter.kulturkosmos.de/api/self-service/shifts/${trimmedInput}`);\n//\n//                 if (!ausgabeResponse.ok) {\n//                     throw new Error('Fehler beim Abrufen der Schichtdaten');\n//                 }\n//\n//                 const jsonData = await ausgabeResponse.json();\n//                 const abfrageWarnung = await fetch('https://supporter.kulturkosmos.de/api/self-service/special-information');\n//                 const jsonWarnung = await abfrageWarnung.json();\n//\n//                 if (jsonWarnung.data && jsonWarnung.data.text) {\n//                     const textWithoutTags = jsonWarnung.data.text.replace(/<[^>]*>/g, ' ');\n//                     setWarnung(true);\n//                     setWarnungText(textWithoutTags);\n//                 }\n//\n//                 if (jsonData.data === null) {\n//                     setNoData(true);\n//                     setData(false);\n//                     setWarnung(false);\n//                 } else {\n//                     setData(jsonData);\n//                 }\n//             }\n//         } catch (error) {\n//             console.error('Fehler beim Abrufen der Daten:', error);\n//         }\n//     };\n//\n//\n//     //useEffect\n//     useEffect(() => {\n//         if (noData) {\n//             const timer = setTimeout(() => {\n//                 setNoData(false);\n//                 setWarnung(false);\n//                 setAbfrage(false);\n//             },kurz); // 3 seconds\n//             return () => clearTimeout(timer);\n//         }\n//\n//         if (abfrage) {\n//             const timeoutDauer = warnung ? lang : normal;\n//             const timer = setTimeout(() => {\n//                 setAbfrage(false);\n//                 setWarnung(false);\n//                 counter();\n//             }, timeoutDauer);\n//             return () => clearTimeout(timer);\n//         }\n//\n//     }, [abfrage, warnung, normal, lang, kurz,  noData]);\n//\n//\n//\n//     return (\n//         <div>\n//             <div className={\"grundflaeche\"}>\n//                 <div className={!abfrage ? \"box\" : \"box boxleft\"}>\n//                     {!abfrage ? (\n//                         <>\n//                             <h2>Supporter Schichtauskunft</h2>\n//                             <h3>Supporter Shiftinformation</h3>\n//                             <h4 className={\"deutsch\"}>Bitte halte dein Bändsel unter den Scanner</h4>\n//                             <h5 className={\"englisch\"}>Please hold your wristband under the scanner</h5>\n//                             <img src={benzel} alt=\"benzel\" className=\"benzel\" />\n//                         </>\n//                     ) : (\n//                         <>\n//                             {warnung && (\n//                                 <div className={\"scroll-container\"}>\n//                                     <div className={\"warnung\"}>\n//                                         <div className={\"warnung-text\"}>{warnungText}</div>\n//                                     </div>\n//                                 </div>\n//                             )}\n//                             <h2>Supporter Schichtauskunft</h2>\n//                             <h3>Supporter Shiftinformation</h3>\n//                             {data ? (\n//                                 <>\n//                                     <h4 className={\"deutsch-ausgabe\"}>Deine Schichten</h4>\n//                                     <h5 className={\"englisch-ausgabe\"}>Your Shifts</h5>\n//                                     {data.data && data.data.length > 0 ? (\n//                                         data.data\n//                                             .filter((entry: any) => dayjs(entry.startAt).isAfter(exampleDate) || dayjs(entry.startAt).isSame(exampleDate, 'day'))\n//                                             .sort((a: any, b: any) => dayjs(a.startAt).diff(exampleDate) - dayjs(b.startAt).diff(exampleDate))\n//                                             .slice(0, 3)\n//                                             .map((entry: any, index: number) => (\n//                                                 <div className={\"ausgabeabfrage\"} key={index}>\n//                                                     <p className={\"index\"}>{index + 1}</p>\n//                                                     <p className={\"days\"}><strong>{days[dayjs(entry.startAt).format('ddd')]}</strong> // {dayjs(entry.startAt).format('DD.MM - HH:mm')}</p>\n//                                                     {/*<p className={\"vector\"}> <img src={Vector} alt=\"Vector\" className=\"Vector\" /></p>*/}\n//                                                     <p className={\"place\"}><img src={Vector} alt=\"Vector\" className=\"Vector\" /> &nbsp; &nbsp; &nbsp;  {waitingSpot[entry.waitingSpot]}</p>\n//                                                     <br />\n//                                                 </div>\n//                                             ))\n//                                     ) : (\n//                                         <p></p>\n//                                     )}\n//                                 </>\n//                             ) : (\n//                                 noData && (\n//                                     <>\n//                                         <h4 className={\"deutsch-ausgabe-no\"}>Keine Informationen</h4>\n//                                         <h5 className={\"englisch-ausgabe-no\"}>No Information</h5>\n//                                     </>\n//                                 )\n//                             )}\n//                         </>\n//                     )}\n//                 </div>\n//                 <img src={Karte} alt={\"Karte\"} className={`Karte${abfrage ? ' in' : ''}`} />\n//                 <img src={Pfeil} alt={\"Pfeil\"} className={`Pfeil ${abfrage ? 'ok' : ''}`}/>\n//                 <img src={Beschriftung} alt={\"Beschriftung\"} className={`Beschriftung ${abfrage ? 'ko' : ''}`}/>\n//             </div>\n//\n//             <div className={\"wip\"}>\n//                 <BarcodeReader\n//                     onError={handleError}\n//                     onScan={handleScan}\n//                 />\n//             </div>\n//\n//             {zaehler}\n//         </div>\n//     );\n// };\n//\n// export default App;\n\n\n\n\n//\n// import React, { FC, useEffect, useState } from 'react';\n// import dayjs from \"dayjs\";\n// import './css/App.css';\n// import benzel from '../src/images/app/grafik 1.png';\n// import Vector from '../src/images/app/Vector.png';\n// import Karte from '../src/images/app/map.png';\n// import Pfeil from '../src/images/app/pfeil.png'\n// import Beschriftung from '../src/images/app/beschriftung.png'\n// import BarcodeReader from 'react-barcode-reader';\n//\n// const App: FC = () => {\n//     const [data, setData] = useState<any>(null);\n//     const [eingabe, setEingabe] = useState<string>(\"\");\n//     const [abfrage, setAbfrage] = useState<boolean>(false);\n//     const [warnung, setWarnung] = useState<boolean>(false);\n//     const [warnungText, setWarnungText] = useState<string | null>(null);\n//     // const now: dayjs.Dayjs = dayjs(); todo: exampleDate = now\n//     const exampleDate = dayjs('2023.01.01');\n//     const [noData, setNoData] = useState<boolean>(false);\n//     const [zaehler, setZaehler] = useState<number>(0);\n//     const [lastScannedId, setLastScannedId] = useState<string>(\"\");\n//\n//     //Zeitangabe Anzeige Abfrage\n//     const normal = 10000; // 10 Sekunden -> Normale Abfrage\n//     const lang = 18000; // 18 Sekunden -> Abfrage mit Warnung\n//     const kurz = 3000; // 3 Sekunden -> Abfrage Falsche ID\n//\n//     // Lookup-Tabellen\n//     // Treffpunkt\n//     const waitingSpot: Record<string, string> = {\n//         bike: \"Fahrrad\",\n//         bottle: \"Flasche\",\n//         island: \"Insel\",\n//         keys: \"Schlüssel\",\n//         kitchen: \"Küche\",\n//         mic: \"Mikro\",\n//         mobile: \"Mobile Zellen\",\n//         sofa: \"Sofa\",\n//         star: \"Stern\",\n//         sun: \"Sonne\",\n//         tent: \"Zelt\",\n//         tree: \"Baum\",\n//         turtle: \"Taube\",\n//         window: \"bitte erfragen\"\n//     };\n//\n//     //Übersetzung der Tage\n//     const days: Record<string, string> = {\n//         Mon: \"Mo, Mon\",\n//         Tue: \"Di, Tue\",\n//         Wed: \"Mi, Wed\",\n//         Thu: \"Do, Thu\",\n//         Fri: \"Fr, Fri\",\n//         Sat: \"Sa, Sat\",\n//         Sun: \"So, Sun\"\n//     };\n//\n//     const counter = () => {\n//         setZaehler(prevCount => prevCount + 1); // Zustand aktualisieren\n//     }\n//\n//     //NFC-Reader\n//     //Eingabe des NFC-Scanners wird verarbeitet\n//     const handleScan = async (data: string) => {\n//         if (data !== \"\" && data !== lastScannedId) {\n//             setEingabe(data);\n//             setLastScannedId(data);\n//             await fetchData(data); // Warte auf die Datenabfrage, bevor du fortfährst\n//             setAbfrage(true);\n//         }\n//     };\n//\n//     //Im Falle eines Fehlers wird dieser ausgegeben\n//     const handleError = (err: any) => {\n//         console.error(err);\n//     };\n//\n//     //API-Abfrage\n//     const fetchData = async (input: string) => {\n//         try {\n//             const trimmedInput = input.trim();\n//             if (trimmedInput !== \"\") {\n//                 const ausgabeResponse = await fetch(`https://supporter.kulturkosmos.de/api/self-service/shifts/${trimmedInput}`);\n//\n//                 if (!ausgabeResponse.ok) {\n//                     throw new Error('Fehler beim Abrufen der Schichtdaten');\n//                 }\n//\n//                 const jsonData = await ausgabeResponse.json();\n//                 const abfrageWarnung = await fetch('https://supporter.kulturkosmos.de/api/self-service/special-information');\n//                 const jsonWarnung = await abfrageWarnung.json();\n//\n//                 if (jsonWarnung.data && jsonWarnung.data.text) {\n//                     const textWithoutTags = jsonWarnung.data.text.replace(/<[^>]*>/g, ' ');\n//                     setWarnung(true);\n//                     setWarnungText(textWithoutTags);\n//                 }\n//\n//                 if (jsonData.data === null) {\n//                     setNoData(true);\n//                     setData(false);\n//                     setWarnung(false);\n//                 } else {\n//                     setData(jsonData);\n//                 }\n//             }\n//         } catch (error) {\n//             console.error('Fehler beim Abrufen der Daten:', error);\n//         }\n//     };\n//\n//     //useEffect\n//     useEffect(() => {\n//         if (noData) {\n//             const timer = setTimeout(() => {\n//                 setNoData(false);\n//                 setWarnung(false);\n//                 setAbfrage(false);\n//             }, kurz); // 3 seconds\n//             return () => clearTimeout(timer);\n//         }\n//\n//         if (abfrage) {\n//             const timeoutDauer = warnung ? lang : normal;\n//             const timer = setTimeout(() => {\n//                 setAbfrage(false);\n//                 setWarnung(false);\n//                 counter();\n//             }, timeoutDauer);\n//             return () => clearTimeout(timer);\n//         }\n//\n//     }, [abfrage, warnung, normal, lang, kurz, noData]);\n//\n//     return (\n//         <div>\n//             <div className={\"grundflaeche\"}>\n//                 <div className={!abfrage ? \"box\" : \"box boxleft\"}>\n//                     {!abfrage ? (\n//                         <>\n//                             <h2>Supporter Schichtauskunft</h2>\n//                             <h3>Supporter Shiftinformation</h3>\n//                             <h4 className={\"deutsch\"}>Bitte halte dein Bändsel unter den Scanner</h4>\n//                             <h5 className={\"englisch\"}>Please hold your wristband under the scanner</h5>\n//                             <img src={benzel} alt=\"benzel\" className=\"benzel\" />\n//                         </>\n//                     ) : (\n//                         <>\n//                             {warnung && (\n//                                 <div className={\"scroll-container\"}>\n//                                     <div className={\"warnung\"}>\n//                                         <div className={\"warnung-text\"}>{warnungText}</div>\n//                                     </div>\n//                                 </div>\n//                             )}\n//                             <h2>Supporter Schichtauskunft</h2>\n//                             <h3>Supporter Shiftinformation</h3>\n//                             {data ? (\n//                                 <>\n//                                     <h4 className={\"deutsch-ausgabe\"}>Deine Schichten</h4>\n//                                     <h5 className={\"englisch-ausgabe\"}>Your Shifts</h5>\n//                                     {data.data && data.data.length > 0 ? (\n//                                         data.data\n//                                             .filter((entry: any) => dayjs(entry.startAt).isAfter(exampleDate) || dayjs(entry.startAt).isSame(exampleDate, 'day'))\n//                                             .sort((a: any, b: any) => dayjs(a.startAt).diff(exampleDate) - dayjs(b.startAt).diff(exampleDate))\n//                                             .slice(0, 3)\n//                                             .map((entry: any, index: number) => (\n//                                                 <div className={\"ausgabeabfrage\"} key={index}>\n//                                                     <p className={\"index\"}>{index + 1}</p>\n//                                                     <p className={\"days\"}><strong>{days[dayjs(entry.startAt).format('ddd')]}</strong> // {dayjs(entry.startAt).format('DD.MM - HH:mm')}</p>\n//                                                     {/*<p className={\"vector\"}> <img src={Vector} alt=\"Vector\" className=\"Vector\" /></p>*/}\n//                                                     <p className={\"place\"}><img src={Vector} alt=\"Vector\" className=\"Vector\" /> &nbsp; &nbsp; &nbsp;  {waitingSpot[entry.waitingSpot]}</p>\n//                                                     <br />\n//                                                 </div>\n//                                             ))\n//                                     ) : (\n//                                         <p></p>\n//                                     )}\n//                                 </>\n//                             ) : (\n//                                 noData && (\n//                                     <>\n//                                         <h4 className={\"deutsch-ausgabe-no\"}>Keine Informationen</h4>\n//                                         <h5 className={\"englisch-ausgabe-no\"}>No Information</h5>\n//                                     </>\n//                                 )\n//                             )}\n//                         </>\n//                     )}\n//                 </div>\n//                 <img src={Karte} alt={\"Karte\"} className={`Karte${abfrage ? ' in' : ''}`} />\n//                 <img src={Pfeil} alt={\"Pfeil\"} className={`Pfeil ${abfrage ? 'ok' : ''}`}/>\n//                 <img src={Beschriftung} alt={\"Beschriftung\"} className={`Beschriftung ${abfrage ? 'ko' : ''}`}/>\n//             </div>\n//\n//             <div className={\"wip\"}>\n//                 <BarcodeReader\n//                     onError={handleError}\n//                     onScan={handleScan}\n//                 />\n//             </div>\n//\n//             {zaehler}\n//         </div>\n//     );\n// };\n//\n// export default App;\n\n\n\n\n\n\n\nimport React, { FC, useEffect, useState } from 'react';\nimport dayjs from \"dayjs\";\nimport './css/App.css';\nimport benzel from '../src/images/app/grafik 1.png';\nimport Vector from '../src/images/app/Vector.png';\nimport Karte from '../src/images/app/SupporterMap2024.png';\nimport Pfeil from '../src/images/app/pfeil.png';\nimport Beschriftung from '../src/images/app/beschriftung.png';\nimport BarcodeReader from 'react-barcode-reader';\n\nconst App: FC = () => {\n    const [data, setData] = useState<any>(null);\n    const [eingabe, setEingabe] = useState<string>(\"\");\n    const [abfrage, setAbfrage] = useState<boolean>(false);\n    const [warnung, setWarnung] = useState<boolean>(false);\n    const [warnungText, setWarnungText] = useState<string | null>(null);\n    const exampleDate = dayjs('2023.01.01');\n    const [noData, setNoData] = useState<boolean>(false);\n    // const [zaehler, setZaehler] = useState<number>(0);\n    const [lastScannedId, setLastScannedId] = useState<string>(\"\");\n    const [scanTimeout, setScanTimeout] = useState<NodeJS.Timeout | null>(null);\n\n    // Zeitangabe Anzeige Abfrage\n    const normal = 10000; // 10 Sekunden -> Normale Abfrage\n    const lang = 18000; // 18 Sekunden -> Abfrage mit Warnung\n    const kurz = 3000; // 3 Sekunden -> Abfrage Falsche ID\n    const resetTime = 15000; // 15 Sekunden -> Zeit nach der eine ID wieder gescannt werden kann\n\n    // Lookup-Tabellen\n    const waitingSpot: Record<string, string> = {\n        bike: \"Fahrrad\",\n        bottle: \"Flasche\",\n        island: \"Insel\",\n        keys: \"Schlüssel\",\n        kitchen: \"Küche\",\n        mic: \"Mikro\",\n        mobile: \"Mobile Zellen\",\n        sofa: \"Sofa\",\n        star: \"Stern\",\n        sun: \"Sonne\",\n        tent: \"Zelt\",\n        tree: \"Baum\",\n        turtle: \"Taube\",\n        window: \"bitte erfragen\"\n    };\n\n    const days: Record<string, string> = {\n        Mon: \"Mo, Mon\",\n        Tue: \"Di, Tue\",\n        Wed: \"Mi, Wed\",\n        Thu: \"Do, Thu\",\n        Fri: \"Fr, Fri\",\n        Sat: \"Sa, Sat\",\n        Sun: \"So, Sun\"\n    };\n\n    // const counter = () => {\n    //     setZaehler(prevCount => prevCount + 1); // Zustand aktualisieren\n    // };\n\n    const resetLastScannedId = () => {\n        setLastScannedId(\"\");\n    };\n\n    // NFC-Reader\n    const handleScan = async (data: string) => {\n        if (data !== \"\" && data !== lastScannedId) {\n            setEingabe(data);\n            setLastScannedId(data);\n            await fetchData(data); // Warte auf die Datenabfrage, bevor du fortfährst\n            setAbfrage(true);\n\n            if (scanTimeout) {\n                clearTimeout(scanTimeout);\n            }\n            setScanTimeout(setTimeout(resetLastScannedId, resetTime));\n        }\n    };\n\n    const handleError = (err: any) => {\n        console.error(err);\n    };\n\n    const fetchData = async (input: string) => {\n        try {\n            const trimmedInput = input.trim();\n            if (trimmedInput !== \"\") {\n                const ausgabeResponse = await fetch(`https://supporter.kulturkosmos.de/api/self-service/shifts/${trimmedInput}`);\n\n                if (!ausgabeResponse.ok) {\n                    throw new Error('Fehler beim Abrufen der Schichtdaten');\n                }\n\n                const jsonData = await ausgabeResponse.json();\n                const abfrageWarnung = await fetch('https://supporter.kulturkosmos.de/api/self-service/special-information');\n                const jsonWarnung = await abfrageWarnung.json();\n\n                if (jsonWarnung.data && jsonWarnung.data.text) {\n                    const textWithoutTags = jsonWarnung.data.text.replace(/<[^>]*>/g, ' ');\n                    setWarnung(true);\n                    setWarnungText(textWithoutTags);\n                }\n\n                if (jsonData.data === null) {\n                    setNoData(true);\n                    setData(false);\n                    setWarnung(false);\n                } else {\n                    setData(jsonData);\n                }\n            }\n        } catch (error) {\n            console.error('Fehler beim Abrufen der Daten:', error);\n        }\n    };\n\n    // useEffect(() => {\n    //     if (noData) {\n    //         const timer = setTimeout(() => {\n    //             setNoData(false);\n    //             setWarnung(false);\n    //             setAbfrage(false);\n    //         }, kurz); // 3 seconds\n    //         return () => clearTimeout(timer);\n    //     }\n    //\n    //     if (abfrage) {\n    //         const timeoutDauer = warnung ? lang : normal;\n    //         const timer = setTimeout(() => {\n    //             setAbfrage(false);\n    //             setWarnung(false);\n    //             // counter();\n    //         }, timeoutDauer);\n    //         return () => clearTimeout(timer);\n    //     }\n    //\n    // }, [abfrage, warnung, normal, lang, kurz, noData]);\n\n    return (\n        <div>\n            <div className={\"grundflaeche\"}>\n                <div className={!abfrage ? \"box\" : \"box boxleft\"}>\n                    {!abfrage ? (\n                        <>\n                            <h2>Supporter:innen Schichtauskunft</h2>\n                            <h3>Supporter:innen Shiftinformation</h3>\n                            <h4 className={\"deutsch\"}>Bitte halte dein Bändsel unter den Scanner</h4>\n                            <h5 className={\"englisch\"}>Please hold your wristband under the scanner</h5>\n                            <img src={benzel} alt=\"benzel\" className=\"benzel\" />\n                        </>\n                    ) : (\n                        <>\n                            {warnung && (\n                                <div className={\"scroll-container\"}>\n                                    <div className={\"warnung\"}>\n                                        <div className={\"warnung-text\"}>{warnungText}</div>\n                                    </div>\n                                </div>\n                            )}\n                            <h2>Supporter Schichtauskunft</h2>\n                            <h3>Supporter Shiftinformation</h3>\n                            {data ? (\n                                <>\n                                    <h4 className={\"deutsch-ausgabe\"}>Deine Schichten</h4>\n                                    <h5 className={\"englisch-ausgabe\"}>Your Shifts</h5>\n                                    {data.data && data.data.length > 0 ? (\n                                        data.data\n                                            .filter((entry: any) => dayjs(entry.startAt).isAfter(exampleDate) || dayjs(entry.startAt).isSame(exampleDate, 'day'))\n                                            .sort((a: any, b: any) => dayjs(a.startAt).diff(exampleDate) - dayjs(b.startAt).diff(exampleDate))\n                                            .slice(0, 3)\n                                            .map((entry: any, index: number) => (\n                                                <div className={\"ausgabeabfrage\"} key={index}>\n                                                    <p className={\"index\"}>{index + 1}</p>\n                                                    <p className={\"days\"}><strong>{days[dayjs(entry.startAt).format('ddd')]}</strong> // {dayjs(entry.startAt).format('DD.MM - HH:mm')}</p>\n                                                    <p className={\"place\"}><img src={Vector} alt=\"Vector\" className=\"Vector\" /> &nbsp; &nbsp; &nbsp;  {waitingSpot[entry.waitingSpot]}</p>\n                                                    <br />\n                                                </div>\n                                            ))\n                                    ) : (\n                                        <p></p>\n                                    )}\n                                </>\n                            ) : (\n                                noData && (\n                                    <>\n                                        <h4 className={\"deutsch-ausgabe-no\"}>Keine Informationen</h4>\n                                        <h5 className={\"englisch-ausgabe-no\"}>No Information</h5>\n                                    </>\n                                )\n                            )}\n                        </>\n                    )}\n                </div>\n                <img src={Karte} alt={\"Karte\"} className={`Karte${abfrage ? ' in' : ''}`} />\n                <img src={Pfeil} alt={\"Pfeil\"} className={`Pfeil ${abfrage ? 'ok' : ''}`}/>\n                <img src={Beschriftung} alt={\"Beschriftung\"} className={`Beschriftung ${abfrage ? 'ko' : ''}`}/>\n            </div>\n\n            <div className={\"wip\"}>\n                <BarcodeReader\n                    onError={handleError}\n                    onScan={handleScan}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default App;"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}