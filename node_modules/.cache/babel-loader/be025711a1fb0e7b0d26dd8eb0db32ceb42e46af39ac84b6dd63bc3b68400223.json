{"ast":null,"code":"var _jsxFileName = \"/home/pascal/Projekte/abfrage-api-supporter/src/App.tsx\",\n  _s = $RefreshSig$();\n// import React, { FC, useEffect, useState } from 'react';\n//\n// const App: FC = () => {\n//     const [data, setData] = useState<any>(null);\n//     const [eingabe, setEingabe] = useState<string>(\"\");\n//     const [test, setTest] = useState<string>(\"\");\n//     console.log(test);\n//\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 if (eingabe.trim() !== \"\") { // Überprüfung, ob 'eingabe' leer ist\n//                     const response = await fetch(`https://supporter.kulturkosmos.de/api/self-service/shifts/${eingabe}`);\n//                     if (!response.ok) {\n//                         throw new Error('Network response was not ok');\n//                     }\n//                     const jsonData = await response.json();\n//                     setData(jsonData);\n//                 }\n//             } catch (error) {\n//                 console.error('Error fetching data:', error);\n//             }\n//         };\n//\n//         fetchData();\n//     }, [eingabe]); // useEffect abhängig von 'eingabe'\n//\n//\n//\n//     return (\n//         <div>\n//             <h1>Abfrage Supporter</h1>\n//             {data && (\n//                 <div>\n//                     <p>Andere Daten: {JSON.stringify(data)}</p>\n//                 </div>\n//             )}\n//\n//             <div>\n//                 <input\n//                     type=\"text\"\n//                     placeholder=\"ID\"\n//                     value={eingabe}\n//                     onChange={(e) => setEingabe(e.target.value)}\n//                 />\n//                 <button onClick={() => console.log(\"test\")}>Check</button>\n//             </div>\n//         </div>\n//     );\n// };\n//\n// export default App;\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [data, setData] = useState(null);\n  const [eingabe, setEingabe] = useState(\"\");\n  const [test, setTest] = useState(\"\");\n  console.log(test);\n  const fetchData = async () => {\n    try {\n      if (eingabe.trim() !== \"\") {\n        // Überprüfung, ob 'eingabe' leer ist\n        const response = await fetch(`https://supporter.kulturkosmos.de/api/self-service/shifts/${eingabe}`);\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const jsonData = await response.json();\n        setData(jsonData);\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  const handleClick = () => {\n    fetchData();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Abfrage Supporter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), data && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Andere Daten: \", JSON.stringify(data)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"ID\",\n        value: eingabe,\n        onChange: e => setEingabe(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClick,\n        children: \"Check\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"LDtXxUU4ZeEmY9rjSVXg3ZheLTQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","data","setData","eingabe","setEingabe","test","setTest","console","log","fetchData","trim","response","fetch","ok","Error","jsonData","json","error","handleClick","children","fileName","_jsxFileName","lineNumber","columnNumber","JSON","stringify","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/home/pascal/Projekte/abfrage-api-supporter/src/App.tsx"],"sourcesContent":["// import React, { FC, useEffect, useState } from 'react';\n//\n// const App: FC = () => {\n//     const [data, setData] = useState<any>(null);\n//     const [eingabe, setEingabe] = useState<string>(\"\");\n//     const [test, setTest] = useState<string>(\"\");\n//     console.log(test);\n//\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 if (eingabe.trim() !== \"\") { // Überprüfung, ob 'eingabe' leer ist\n//                     const response = await fetch(`https://supporter.kulturkosmos.de/api/self-service/shifts/${eingabe}`);\n//                     if (!response.ok) {\n//                         throw new Error('Network response was not ok');\n//                     }\n//                     const jsonData = await response.json();\n//                     setData(jsonData);\n//                 }\n//             } catch (error) {\n//                 console.error('Error fetching data:', error);\n//             }\n//         };\n//\n//         fetchData();\n//     }, [eingabe]); // useEffect abhängig von 'eingabe'\n//\n//\n//\n//     return (\n//         <div>\n//             <h1>Abfrage Supporter</h1>\n//             {data && (\n//                 <div>\n//                     <p>Andere Daten: {JSON.stringify(data)}</p>\n//                 </div>\n//             )}\n//\n//             <div>\n//                 <input\n//                     type=\"text\"\n//                     placeholder=\"ID\"\n//                     value={eingabe}\n//                     onChange={(e) => setEingabe(e.target.value)}\n//                 />\n//                 <button onClick={() => console.log(\"test\")}>Check</button>\n//             </div>\n//         </div>\n//     );\n// };\n//\n// export default App;\n\nimport React, { FC, useEffect, useState } from 'react';\n\nconst App: FC = () => {\n    const [data, setData] = useState<any>(null);\n    const [eingabe, setEingabe] = useState<string>(\"\");\n    const [test, setTest] = useState<string>(\"\");\n    console.log(test);\n\n    const fetchData = async () => {\n        try {\n            if (eingabe.trim() !== \"\") { // Überprüfung, ob 'eingabe' leer ist\n                const response = await fetch(`https://supporter.kulturkosmos.de/api/self-service/shifts/${eingabe}`);\n                if (!response.ok) {\n                    throw new Error('Network response was not ok');\n                }\n                const jsonData = await response.json();\n                setData(jsonData);\n            }\n        } catch (error) {\n            console.error('Error fetching data:', error);\n        }\n    };\n\n    const handleClick = () => {\n        fetchData();\n    };\n\n    return (\n        <div>\n            <h1>Abfrage Supporter</h1>\n            {data && (\n                <div>\n                    <p>Andere Daten: {JSON.stringify(data)}</p>\n                </div>\n            )}\n\n            <div>\n                <input\n                    type=\"text\"\n                    placeholder=\"ID\"\n                    value={eingabe}\n                    onChange={(e) => setEingabe(e.target.value)}\n                />\n                <button onClick={handleClick}>Check</button>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAmBC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,MAAMC,GAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAM,IAAI,CAAC;EAC3C,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAS,EAAE,CAAC;EAClD,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAS,EAAE,CAAC;EAC5CW,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;EAEjB,MAAMI,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC1B,IAAI;MACA,IAAIN,OAAO,CAACO,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QAAE;QACzB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,6DAA4DT,OAAQ,EAAC,CAAC;QACpG,IAAI,CAACQ,QAAQ,CAACE,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAClD;QACA,MAAMC,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QACtCd,OAAO,CAACa,QAAQ,CAAC;MACrB;IACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZV,OAAO,CAACU,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD;EACJ,CAAC;EAED,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACtBT,SAAS,CAAC,CAAC;EACf,CAAC;EAED,oBACIX,OAAA;IAAAqB,QAAA,gBACIrB,OAAA;MAAAqB,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACzBtB,IAAI,iBACDH,OAAA;MAAAqB,QAAA,eACIrB,OAAA;QAAAqB,QAAA,GAAG,gBAAc,EAACK,IAAI,CAACC,SAAS,CAACxB,IAAI,CAAC;MAAA;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1C,CACR,eAEDzB,OAAA;MAAAqB,QAAA,gBACIrB,OAAA;QACI4B,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,IAAI;QAChBC,KAAK,EAAEzB,OAAQ;QACf0B,QAAQ,EAAGC,CAAC,IAAK1B,UAAU,CAAC0B,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/C,CAAC,eACFzB,OAAA;QAAQkC,OAAO,EAAEd,WAAY;QAAAC,QAAA,EAAC;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAACvB,EAAA,CA7CID,GAAO;AAAAkC,EAAA,GAAPlC,GAAO;AA+Cb,eAAeA,GAAG;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}